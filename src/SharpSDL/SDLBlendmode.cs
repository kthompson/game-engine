// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SharpSDL
{
    /// <summary>The blend mode used in SDL_RenderCopy() and drawing operations.</summary>
    public enum BlendMode
    {
        /// <summary>
/// <para>no blending</para>
/// <para>dstRGBA = srcRGBA</para>
/// </summary>
        BLENDMODE_NONE = 0,
        /// <summary>
/// <para>alpha blending</para>
/// <para>dstRGB = (srcRGB * srcA) + (dstRGB * (1-srcA))</para>
/// <para>dstA = srcA + (dstA * (1-srcA))</para>
/// </summary>
        BLENDMODE_BLEND = 1,
        /// <summary>
/// <para>additive blending</para>
/// <para>dstRGB = (srcRGB * srcA) + dstRGB</para>
/// <para>dstA = dstA</para>
/// </summary>
        BLENDMODE_ADD = 2,
        /// <summary>
/// <para>color modulate</para>
/// <para>dstRGB = srcRGB * dstRGB</para>
/// <para>dstA = dstA</para>
/// </summary>
        BLENDMODE_MOD = 4,
        BLENDMODE_INVALID = 2147483647
    }

    /// <summary>The blend operation used when combining source and destination pixel components</summary>
    public enum BlendOperation
    {
        /// <summary>dst + src: supported by all renderers</summary>
        BLENDOPERATION_ADD = 1,
        /// <summary>dst - src : supported by D3D9, D3D11, OpenGL, OpenGLES</summary>
        BLENDOPERATION_SUBTRACT = 2,
        /// <summary>src - dst : supported by D3D9, D3D11, OpenGL, OpenGLES</summary>
        BLENDOPERATION_REV_SUBTRACT = 3,
        /// <summary>min(dst, src) : supported by D3D11</summary>
        BLENDOPERATION_MINIMUM = 4,
        /// <summary>max(dst, src) : supported by D3D11</summary>
        BLENDOPERATION_MAXIMUM = 5
    }

    /// <summary>The normalized factor used to multiply pixel components</summary>
    public enum BlendFactor
    {
        /// <summary>0, 0, 0, 0</summary>
        BLENDFACTOR_ZERO = 1,
        /// <summary>1, 1, 1, 1</summary>
        BLENDFACTOR_ONE = 2,
        /// <summary>srcR, srcG, srcB, srcA</summary>
        BLENDFACTOR_SRC_COLOR = 3,
        /// <summary>1-srcR, 1-srcG, 1-srcB, 1-srcA</summary>
        BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4,
        /// <summary>srcA, srcA, srcA, srcA</summary>
        BLENDFACTOR_SRC_ALPHA = 5,
        /// <summary>1-srcA, 1-srcA, 1-srcA, 1-srcA</summary>
        BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6,
        /// <summary>dstR, dstG, dstB, dstA</summary>
        BLENDFACTOR_DST_COLOR = 7,
        /// <summary>1-dstR, 1-dstG, 1-dstB, 1-dstA</summary>
        BLENDFACTOR_ONE_MINUS_DST_COLOR = 8,
        /// <summary>dstA, dstA, dstA, dstA</summary>
        BLENDFACTOR_DST_ALPHA = 9,
        /// <summary>1-dstA, 1-dstA, 1-dstA, 1-dstA</summary>
        BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10
    }

    public unsafe partial class SDLBlendmode
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_ComposeCustomBlendMode")]
            internal static extern global::SharpSDL.BlendMode ComposeCustomBlendMode(global::SharpSDL.BlendFactor srcColorFactor, global::SharpSDL.BlendFactor dstColorFactor, global::SharpSDL.BlendOperation colorOperation, global::SharpSDL.BlendFactor srcAlphaFactor, global::SharpSDL.BlendFactor dstAlphaFactor, global::SharpSDL.BlendOperation alphaOperation);
        }

        /// <summary>Create a custom blend mode, which may or may not be supported by a given renderer</summary>
/// <param name="srcColorFactor">source color factor</param>
/// <param name="dstColorFactor">destination color factor</param>
/// <param name="colorOperation">color operation</param>
/// <param name="srcAlphaFactor">source alpha factor</param>
/// <param name="dstAlphaFactor">destination alpha factor</param>
/// <param name="alphaOperation">alpha operation</param>
/// <remarks>
/// <para>The result of the blend mode operation will be:</para>
/// <para>dstRGB = dstRGB * dstColorFactor colorOperation srcRGB * srcColorFactor</para>
/// <para>and</para>
/// <para>dstA = dstA * dstAlphaFactor alphaOperation srcA * srcAlphaFactor</para>
/// </remarks>
        public static global::SharpSDL.BlendMode ComposeCustomBlendMode(global::SharpSDL.BlendFactor srcColorFactor, global::SharpSDL.BlendFactor dstColorFactor, global::SharpSDL.BlendOperation colorOperation, global::SharpSDL.BlendFactor srcAlphaFactor, global::SharpSDL.BlendFactor dstAlphaFactor, global::SharpSDL.BlendOperation alphaOperation)
        {
            var __ret = __Internal.ComposeCustomBlendMode(srcColorFactor, dstColorFactor, colorOperation, srcAlphaFactor, dstAlphaFactor, alphaOperation);
            return __ret;
        }
    }
}
