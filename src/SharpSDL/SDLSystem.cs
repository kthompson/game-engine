// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SharpSDL
{
    /// <summary>Set a function that is called for every windows message, before TranslateMessage()</summary>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void WindowsMessageHook(global::System.IntPtr userdata, global::System.IntPtr hWnd, uint message, ulong wParam, long lParam);

    public unsafe partial class IDirect3DDevice9
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.IDirect3DDevice9> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.IDirect3DDevice9>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.IDirect3DDevice9 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.IDirect3DDevice9(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.IDirect3DDevice9 __CreateInstance(global::SharpSDL.IDirect3DDevice9.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.IDirect3DDevice9(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.IDirect3DDevice9.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.IDirect3DDevice9.__Internal));
            *(global::SharpSDL.IDirect3DDevice9.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IDirect3DDevice9(global::SharpSDL.IDirect3DDevice9.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IDirect3DDevice9(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SDLSystem
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_SetWindowsMessageHook")]
            internal static extern void SetWindowsMessageHook(global::System.IntPtr callback, global::System.IntPtr userdata);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_Direct3D9GetAdapterIndex")]
            internal static extern int Direct3D9GetAdapterIndex(int displayIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_RenderGetD3D9Device")]
            internal static extern global::System.IntPtr RenderGetD3D9Device(global::System.IntPtr renderer);
        }

        public static void SetWindowsMessageHook(global::SharpSDL.WindowsMessageHook callback, global::System.IntPtr userdata)
        {
            var __arg0 = callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            __Internal.SetWindowsMessageHook(__arg0, userdata);
        }

        /// <summary>Returns the D3D9 adapter index that matches the specified display index.</summary>
/// <remarks>
/// <para>This adapter index can be passed to IDirect3D9::CreateDevice and controls</para>
/// <para>on which monitor a full screen application will appear.</para>
/// </remarks>
        public static int Direct3D9GetAdapterIndex(int displayIndex)
        {
            var __ret = __Internal.Direct3D9GetAdapterIndex(displayIndex);
            return __ret;
        }

        /// <summary>Returns the D3D device associated with a renderer, or NULL if it's not a D3D renderer.</summary>
/// <remarks>Once you are done using the device, you should release it to avoid a resource leak.</remarks>
        public static global::SharpSDL.IDirect3DDevice9 RenderGetD3D9Device(global::SharpSDL.Renderer renderer)
        {
            var __arg0 = ReferenceEquals(renderer, null) ? global::System.IntPtr.Zero : renderer.__Instance;
            var __ret = __Internal.RenderGetD3D9Device(__arg0);
            global::SharpSDL.IDirect3DDevice9 __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::SharpSDL.IDirect3DDevice9.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::SharpSDL.IDirect3DDevice9) global::SharpSDL.IDirect3DDevice9.NativeToManagedMap[__ret];
            else __result0 = global::SharpSDL.IDirect3DDevice9.__CreateInstance(__ret);
            return __result0;
        }
    }
}
