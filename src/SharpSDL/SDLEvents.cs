// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SharpSDL
{
    /// <summary>The types of events that can be delivered.</summary>
    public enum EventType
    {
        /// <summary>Unused (do not remove)</summary>
        FIRSTEVENT = 0,
        /// <summary>User-requested quit</summary>
        QUIT = 256,
        /// <summary>
/// <para>The application is being terminated by the OS</para>
/// <para>Called on iOS in applicationWillTerminate()</para>
/// <para>Called on Android in onDestroy()</para>
/// </summary>
        APP_TERMINATING = 257,
        /// <summary>
/// <para>The application is low on memory, free memory if possible.</para>
/// <para>Called on iOS in applicationDidReceiveMemoryWarning()</para>
/// <para>Called on Android in onLowMemory()</para>
/// </summary>
        APP_LOWMEMORY = 258,
        /// <summary>
/// <para>The application is about to enter the background</para>
/// <para>Called on iOS in applicationWillResignActive()</para>
/// <para>Called on Android in onPause()</para>
/// </summary>
        APP_WILLENTERBACKGROUND = 259,
        /// <summary>
/// <para>The application did enter the background and may not get CPU for some time</para>
/// <para>Called on iOS in applicationDidEnterBackground()</para>
/// <para>Called on Android in onPause()</para>
/// </summary>
        APP_DIDENTERBACKGROUND = 260,
        /// <summary>
/// <para>The application is about to enter the foreground</para>
/// <para>Called on iOS in applicationWillEnterForeground()</para>
/// <para>Called on Android in onResume()</para>
/// </summary>
        APP_WILLENTERFOREGROUND = 261,
        /// <summary>
/// <para>The application is now interactive</para>
/// <para>Called on iOS in applicationDidBecomeActive()</para>
/// <para>Called on Android in onResume()</para>
/// </summary>
        APP_DIDENTERFOREGROUND = 262,
        /// <summary>Display state change</summary>
        DISPLAYEVENT = 336,
        /// <summary>Window state change</summary>
        WINDOWEVENT = 512,
        /// <summary>System specific event</summary>
        SYSWMEVENT = 513,
        /// <summary>Key pressed</summary>
        KEYDOWN = 768,
        /// <summary>Key released</summary>
        KEYUP = 769,
        /// <summary>Keyboard text editing (composition)</summary>
        TEXTEDITING = 770,
        /// <summary>Keyboard text input</summary>
        TEXTINPUT = 771,
        /// <summary>
/// <para>Keymap changed due to a system event such as an</para>
/// <para>input language or keyboard layout change.</para>
/// </summary>
        KEYMAPCHANGED = 772,
        /// <summary>Mouse moved</summary>
        MOUSEMOTION = 1024,
        /// <summary>Mouse button pressed</summary>
        MOUSEBUTTONDOWN = 1025,
        /// <summary>Mouse button released</summary>
        MOUSEBUTTONUP = 1026,
        /// <summary>Mouse wheel motion</summary>
        MOUSEWHEEL = 1027,
        /// <summary>Joystick axis motion</summary>
        JOYAXISMOTION = 1536,
        /// <summary>Joystick trackball motion</summary>
        JOYBALLMOTION = 1537,
        /// <summary>Joystick hat position change</summary>
        JOYHATMOTION = 1538,
        /// <summary>Joystick button pressed</summary>
        JOYBUTTONDOWN = 1539,
        /// <summary>Joystick button released</summary>
        JOYBUTTONUP = 1540,
        /// <summary>A new joystick has been inserted into the system</summary>
        JOYDEVICEADDED = 1541,
        /// <summary>An opened joystick has been removed</summary>
        JOYDEVICEREMOVED = 1542,
        /// <summary>Game controller axis motion</summary>
        CONTROLLERAXISMOTION = 1616,
        /// <summary>Game controller button pressed</summary>
        CONTROLLERBUTTONDOWN = 1617,
        /// <summary>Game controller button released</summary>
        CONTROLLERBUTTONUP = 1618,
        /// <summary>A new Game controller has been inserted into the system</summary>
        CONTROLLERDEVICEADDED = 1619,
        /// <summary>An opened Game controller has been removed</summary>
        CONTROLLERDEVICEREMOVED = 1620,
        /// <summary>The controller mapping was updated</summary>
        CONTROLLERDEVICEREMAPPED = 1621,
        FINGERDOWN = 1792,
        FINGERUP = 1793,
        FINGERMOTION = 1794,
        DOLLARGESTURE = 2048,
        DOLLARRECORD = 2049,
        MULTIGESTURE = 2050,
        /// <summary>The clipboard changed</summary>
        CLIPBOARDUPDATE = 2304,
        /// <summary>The system requests a file open</summary>
        DROPFILE = 4096,
        /// <summary>text/plain drag-and-drop event</summary>
        DROPTEXT = 4097,
        /// <summary>A new set of drops is beginning (NULL filename)</summary>
        DROPBEGIN = 4098,
        /// <summary>Current set of drops is now complete (NULL filename)</summary>
        DROPCOMPLETE = 4099,
        /// <summary>A new audio device is available</summary>
        AUDIODEVICEADDED = 4352,
        /// <summary>An audio device has been removed.</summary>
        AUDIODEVICEREMOVED = 4353,
        /// <summary>A sensor was updated</summary>
        SENSORUPDATE = 4608,
        /// <summary>The render targets have been reset and their contents need to be updated</summary>
        RENDER_TARGETS_RESET = 8192,
        /// <summary>The device has been reset and all textures need to be recreated</summary>
        RENDER_DEVICE_RESET = 8193,
        /// <summary>
/// <para>Events ::SDL_USEREVENT through ::SDL_LASTEVENT are for your use,</para>
/// <para>and should be allocated with SDL_RegisterEvents()</para>
/// </summary>
        USEREVENT = 32768,
        /// <summary>This last event is only for bounding internal arrays</summary>
        LASTEVENT = 65535
    }

    public enum Eventaction
    {
        ADDEVENT = 0,
        PEEKEVENT = 1,
        GETEVENT = 2
    }

    public enum InputState
    {
        SDL_RELEASED = 0,
        SDL_PRESSED = 1
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int EventFilter(global::System.IntPtr userdata, global::System.IntPtr @event);

    public unsafe partial class SysWMmsg
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.SysWMmsg> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.SysWMmsg>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.SysWMmsg __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.SysWMmsg(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.SysWMmsg __CreateInstance(global::SharpSDL.SysWMmsg.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.SysWMmsg(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.SysWMmsg.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.SysWMmsg.__Internal));
            *(global::SharpSDL.SysWMmsg.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SysWMmsg(global::SharpSDL.SysWMmsg.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SysWMmsg(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    /// <summary>Fields shared by every event</summary>
    public unsafe partial class CommonEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_CommonEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.CommonEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.CommonEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.CommonEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.CommonEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.CommonEvent __CreateInstance(global::SharpSDL.CommonEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.CommonEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.CommonEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.CommonEvent.__Internal));
            *(global::SharpSDL.CommonEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CommonEvent(global::SharpSDL.CommonEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CommonEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CommonEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.CommonEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CommonEvent(global::SharpSDL.CommonEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.CommonEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.CommonEvent.__Internal*) __Instance) = *((global::SharpSDL.CommonEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.CommonEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.CommonEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.CommonEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.CommonEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.CommonEvent.__Internal*)__Instance)->timestamp = value;
            }
        }
    }

    /// <summary>Display state change event data (event.display.*)</summary>
    public unsafe partial class DisplayEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal uint display;

            [FieldOffset(12)]
            internal byte @event;

            [FieldOffset(13)]
            internal byte padding1;

            [FieldOffset(14)]
            internal byte padding2;

            [FieldOffset(15)]
            internal byte padding3;

            [FieldOffset(16)]
            internal int data1;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_DisplayEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.DisplayEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.DisplayEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.DisplayEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.DisplayEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.DisplayEvent __CreateInstance(global::SharpSDL.DisplayEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.DisplayEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.DisplayEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.DisplayEvent.__Internal));
            *(global::SharpSDL.DisplayEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DisplayEvent(global::SharpSDL.DisplayEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DisplayEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DisplayEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.DisplayEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DisplayEvent(global::SharpSDL.DisplayEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.DisplayEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.DisplayEvent.__Internal*) __Instance) = *((global::SharpSDL.DisplayEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.DisplayEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.DisplayEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.DisplayEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.DisplayEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.DisplayEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public uint Display
        {
            get
            {
                return ((global::SharpSDL.DisplayEvent.__Internal*) __Instance)->display;
            }

            set
            {
                ((global::SharpSDL.DisplayEvent.__Internal*)__Instance)->display = value;
            }
        }

        public byte Event
        {
            get
            {
                return ((global::SharpSDL.DisplayEvent.__Internal*) __Instance)->@event;
            }

            set
            {
                ((global::SharpSDL.DisplayEvent.__Internal*)__Instance)->@event = value;
            }
        }

        public byte Padding1
        {
            get
            {
                return ((global::SharpSDL.DisplayEvent.__Internal*) __Instance)->padding1;
            }

            set
            {
                ((global::SharpSDL.DisplayEvent.__Internal*)__Instance)->padding1 = value;
            }
        }

        public byte Padding2
        {
            get
            {
                return ((global::SharpSDL.DisplayEvent.__Internal*) __Instance)->padding2;
            }

            set
            {
                ((global::SharpSDL.DisplayEvent.__Internal*)__Instance)->padding2 = value;
            }
        }

        public byte Padding3
        {
            get
            {
                return ((global::SharpSDL.DisplayEvent.__Internal*) __Instance)->padding3;
            }

            set
            {
                ((global::SharpSDL.DisplayEvent.__Internal*)__Instance)->padding3 = value;
            }
        }

        public int Data1
        {
            get
            {
                return ((global::SharpSDL.DisplayEvent.__Internal*) __Instance)->data1;
            }

            set
            {
                ((global::SharpSDL.DisplayEvent.__Internal*)__Instance)->data1 = value;
            }
        }
    }

    /// <summary>Window state change event data (event.window.*)</summary>
    public unsafe partial class WindowEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal uint windowID;

            [FieldOffset(12)]
            internal byte @event;

            [FieldOffset(13)]
            internal byte padding1;

            [FieldOffset(14)]
            internal byte padding2;

            [FieldOffset(15)]
            internal byte padding3;

            [FieldOffset(16)]
            internal int data1;

            [FieldOffset(20)]
            internal int data2;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_WindowEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.WindowEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.WindowEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.WindowEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.WindowEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.WindowEvent __CreateInstance(global::SharpSDL.WindowEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.WindowEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.WindowEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.WindowEvent.__Internal));
            *(global::SharpSDL.WindowEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private WindowEvent(global::SharpSDL.WindowEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected WindowEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public WindowEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.WindowEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public WindowEvent(global::SharpSDL.WindowEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.WindowEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.WindowEvent.__Internal*) __Instance) = *((global::SharpSDL.WindowEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.WindowEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.WindowEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.WindowEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.WindowEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.WindowEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public uint WindowID
        {
            get
            {
                return ((global::SharpSDL.WindowEvent.__Internal*) __Instance)->windowID;
            }

            set
            {
                ((global::SharpSDL.WindowEvent.__Internal*)__Instance)->windowID = value;
            }
        }

        public byte Event
        {
            get
            {
                return ((global::SharpSDL.WindowEvent.__Internal*) __Instance)->@event;
            }

            set
            {
                ((global::SharpSDL.WindowEvent.__Internal*)__Instance)->@event = value;
            }
        }

        public byte Padding1
        {
            get
            {
                return ((global::SharpSDL.WindowEvent.__Internal*) __Instance)->padding1;
            }

            set
            {
                ((global::SharpSDL.WindowEvent.__Internal*)__Instance)->padding1 = value;
            }
        }

        public byte Padding2
        {
            get
            {
                return ((global::SharpSDL.WindowEvent.__Internal*) __Instance)->padding2;
            }

            set
            {
                ((global::SharpSDL.WindowEvent.__Internal*)__Instance)->padding2 = value;
            }
        }

        public byte Padding3
        {
            get
            {
                return ((global::SharpSDL.WindowEvent.__Internal*) __Instance)->padding3;
            }

            set
            {
                ((global::SharpSDL.WindowEvent.__Internal*)__Instance)->padding3 = value;
            }
        }

        public int Data1
        {
            get
            {
                return ((global::SharpSDL.WindowEvent.__Internal*) __Instance)->data1;
            }

            set
            {
                ((global::SharpSDL.WindowEvent.__Internal*)__Instance)->data1 = value;
            }
        }

        public int Data2
        {
            get
            {
                return ((global::SharpSDL.WindowEvent.__Internal*) __Instance)->data2;
            }

            set
            {
                ((global::SharpSDL.WindowEvent.__Internal*)__Instance)->data2 = value;
            }
        }
    }

    /// <summary>Keyboard button event structure (event.key.*)</summary>
    public unsafe partial class KeyboardEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal uint windowID;

            [FieldOffset(12)]
            internal byte state;

            [FieldOffset(13)]
            internal byte repeat;

            [FieldOffset(14)]
            internal byte padding2;

            [FieldOffset(15)]
            internal byte padding3;

            [FieldOffset(16)]
            internal global::SharpSDL.Keysym.__Internal keysym;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_KeyboardEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.KeyboardEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.KeyboardEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.KeyboardEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.KeyboardEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.KeyboardEvent __CreateInstance(global::SharpSDL.KeyboardEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.KeyboardEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.KeyboardEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.KeyboardEvent.__Internal));
            *(global::SharpSDL.KeyboardEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private KeyboardEvent(global::SharpSDL.KeyboardEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected KeyboardEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public KeyboardEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.KeyboardEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public KeyboardEvent(global::SharpSDL.KeyboardEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.KeyboardEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.KeyboardEvent.__Internal*) __Instance) = *((global::SharpSDL.KeyboardEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.KeyboardEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.KeyboardEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.KeyboardEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.KeyboardEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.KeyboardEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public uint WindowID
        {
            get
            {
                return ((global::SharpSDL.KeyboardEvent.__Internal*) __Instance)->windowID;
            }

            set
            {
                ((global::SharpSDL.KeyboardEvent.__Internal*)__Instance)->windowID = value;
            }
        }

        public byte State
        {
            get
            {
                return ((global::SharpSDL.KeyboardEvent.__Internal*) __Instance)->state;
            }

            set
            {
                ((global::SharpSDL.KeyboardEvent.__Internal*)__Instance)->state = value;
            }
        }

        public byte Repeat
        {
            get
            {
                return ((global::SharpSDL.KeyboardEvent.__Internal*) __Instance)->repeat;
            }

            set
            {
                ((global::SharpSDL.KeyboardEvent.__Internal*)__Instance)->repeat = value;
            }
        }

        public byte Padding2
        {
            get
            {
                return ((global::SharpSDL.KeyboardEvent.__Internal*) __Instance)->padding2;
            }

            set
            {
                ((global::SharpSDL.KeyboardEvent.__Internal*)__Instance)->padding2 = value;
            }
        }

        public byte Padding3
        {
            get
            {
                return ((global::SharpSDL.KeyboardEvent.__Internal*) __Instance)->padding3;
            }

            set
            {
                ((global::SharpSDL.KeyboardEvent.__Internal*)__Instance)->padding3 = value;
            }
        }

        public global::SharpSDL.Keysym Keysym
        {
            get
            {
                return global::SharpSDL.Keysym.__CreateInstance(new global::System.IntPtr(&((global::SharpSDL.KeyboardEvent.__Internal*) __Instance)->keysym));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::SharpSDL.KeyboardEvent.__Internal*)__Instance)->keysym = *(global::SharpSDL.Keysym.__Internal*) value.__Instance;
            }
        }
    }

    /// <summary>Keyboard text editing event structure (event.edit.*)</summary>
    public unsafe partial class TextEditingEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 52)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal uint windowID;

            [FieldOffset(12)]
            internal fixed sbyte text[32];

            [FieldOffset(44)]
            internal int start;

            [FieldOffset(48)]
            internal int length;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_TextEditingEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.TextEditingEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.TextEditingEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.TextEditingEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.TextEditingEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.TextEditingEvent __CreateInstance(global::SharpSDL.TextEditingEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.TextEditingEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.TextEditingEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.TextEditingEvent.__Internal));
            *(global::SharpSDL.TextEditingEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TextEditingEvent(global::SharpSDL.TextEditingEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TextEditingEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TextEditingEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.TextEditingEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TextEditingEvent(global::SharpSDL.TextEditingEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.TextEditingEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.TextEditingEvent.__Internal*) __Instance) = *((global::SharpSDL.TextEditingEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.TextEditingEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.TextEditingEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.TextEditingEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.TextEditingEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.TextEditingEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public uint WindowID
        {
            get
            {
                return ((global::SharpSDL.TextEditingEvent.__Internal*) __Instance)->windowID;
            }

            set
            {
                ((global::SharpSDL.TextEditingEvent.__Internal*)__Instance)->windowID = value;
            }
        }

        public sbyte[] Text
        {
            get
            {
                sbyte[] __value = null;
                if (((global::SharpSDL.TextEditingEvent.__Internal*) __Instance)->text != null)
                {
                    __value = new sbyte[32];
                    for (int i = 0; i < 32; i++)
                        __value[i] = ((global::SharpSDL.TextEditingEvent.__Internal*) __Instance)->text[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 32; i++)
                        ((global::SharpSDL.TextEditingEvent.__Internal*)__Instance)->text[i] = value[i];
                }
            }
        }

        public int Start
        {
            get
            {
                return ((global::SharpSDL.TextEditingEvent.__Internal*) __Instance)->start;
            }

            set
            {
                ((global::SharpSDL.TextEditingEvent.__Internal*)__Instance)->start = value;
            }
        }

        public int Length
        {
            get
            {
                return ((global::SharpSDL.TextEditingEvent.__Internal*) __Instance)->length;
            }

            set
            {
                ((global::SharpSDL.TextEditingEvent.__Internal*)__Instance)->length = value;
            }
        }
    }

    /// <summary>Keyboard text input event structure (event.text.*)</summary>
    public unsafe partial class TextInputEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal uint windowID;

            [FieldOffset(12)]
            internal fixed sbyte text[32];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_TextInputEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.TextInputEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.TextInputEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.TextInputEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.TextInputEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.TextInputEvent __CreateInstance(global::SharpSDL.TextInputEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.TextInputEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.TextInputEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.TextInputEvent.__Internal));
            *(global::SharpSDL.TextInputEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TextInputEvent(global::SharpSDL.TextInputEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TextInputEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TextInputEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.TextInputEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TextInputEvent(global::SharpSDL.TextInputEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.TextInputEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.TextInputEvent.__Internal*) __Instance) = *((global::SharpSDL.TextInputEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.TextInputEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.TextInputEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.TextInputEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.TextInputEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.TextInputEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public uint WindowID
        {
            get
            {
                return ((global::SharpSDL.TextInputEvent.__Internal*) __Instance)->windowID;
            }

            set
            {
                ((global::SharpSDL.TextInputEvent.__Internal*)__Instance)->windowID = value;
            }
        }

        public sbyte[] Text
        {
            get
            {
                sbyte[] __value = null;
                if (((global::SharpSDL.TextInputEvent.__Internal*) __Instance)->text != null)
                {
                    __value = new sbyte[32];
                    for (int i = 0; i < 32; i++)
                        __value[i] = ((global::SharpSDL.TextInputEvent.__Internal*) __Instance)->text[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 32; i++)
                        ((global::SharpSDL.TextInputEvent.__Internal*)__Instance)->text[i] = value[i];
                }
            }
        }
    }

    /// <summary>Mouse motion event structure (event.motion.*)</summary>
    public unsafe partial class MouseMotionEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 36)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal uint windowID;

            [FieldOffset(12)]
            internal uint which;

            [FieldOffset(16)]
            internal uint state;

            [FieldOffset(20)]
            internal int x;

            [FieldOffset(24)]
            internal int y;

            [FieldOffset(28)]
            internal int xrel;

            [FieldOffset(32)]
            internal int yrel;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_MouseMotionEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.MouseMotionEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.MouseMotionEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.MouseMotionEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.MouseMotionEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.MouseMotionEvent __CreateInstance(global::SharpSDL.MouseMotionEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.MouseMotionEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.MouseMotionEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MouseMotionEvent.__Internal));
            *(global::SharpSDL.MouseMotionEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MouseMotionEvent(global::SharpSDL.MouseMotionEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MouseMotionEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MouseMotionEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MouseMotionEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MouseMotionEvent(global::SharpSDL.MouseMotionEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MouseMotionEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.MouseMotionEvent.__Internal*) __Instance) = *((global::SharpSDL.MouseMotionEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.MouseMotionEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.MouseMotionEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.MouseMotionEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.MouseMotionEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.MouseMotionEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public uint WindowID
        {
            get
            {
                return ((global::SharpSDL.MouseMotionEvent.__Internal*) __Instance)->windowID;
            }

            set
            {
                ((global::SharpSDL.MouseMotionEvent.__Internal*)__Instance)->windowID = value;
            }
        }

        public uint Which
        {
            get
            {
                return ((global::SharpSDL.MouseMotionEvent.__Internal*) __Instance)->which;
            }

            set
            {
                ((global::SharpSDL.MouseMotionEvent.__Internal*)__Instance)->which = value;
            }
        }

        public uint State
        {
            get
            {
                return ((global::SharpSDL.MouseMotionEvent.__Internal*) __Instance)->state;
            }

            set
            {
                ((global::SharpSDL.MouseMotionEvent.__Internal*)__Instance)->state = value;
            }
        }

        public int X
        {
            get
            {
                return ((global::SharpSDL.MouseMotionEvent.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::SharpSDL.MouseMotionEvent.__Internal*)__Instance)->x = value;
            }
        }

        public int Y
        {
            get
            {
                return ((global::SharpSDL.MouseMotionEvent.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::SharpSDL.MouseMotionEvent.__Internal*)__Instance)->y = value;
            }
        }

        public int Xrel
        {
            get
            {
                return ((global::SharpSDL.MouseMotionEvent.__Internal*) __Instance)->xrel;
            }

            set
            {
                ((global::SharpSDL.MouseMotionEvent.__Internal*)__Instance)->xrel = value;
            }
        }

        public int Yrel
        {
            get
            {
                return ((global::SharpSDL.MouseMotionEvent.__Internal*) __Instance)->yrel;
            }

            set
            {
                ((global::SharpSDL.MouseMotionEvent.__Internal*)__Instance)->yrel = value;
            }
        }
    }

    /// <summary>Mouse button event structure (event.button.*)</summary>
    public unsafe partial class MouseButtonEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 28)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal uint windowID;

            [FieldOffset(12)]
            internal uint which;

            [FieldOffset(16)]
            internal byte button;

            [FieldOffset(17)]
            internal byte state;

            [FieldOffset(18)]
            internal byte clicks;

            [FieldOffset(19)]
            internal byte padding1;

            [FieldOffset(20)]
            internal int x;

            [FieldOffset(24)]
            internal int y;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_MouseButtonEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.MouseButtonEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.MouseButtonEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.MouseButtonEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.MouseButtonEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.MouseButtonEvent __CreateInstance(global::SharpSDL.MouseButtonEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.MouseButtonEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.MouseButtonEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MouseButtonEvent.__Internal));
            *(global::SharpSDL.MouseButtonEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MouseButtonEvent(global::SharpSDL.MouseButtonEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MouseButtonEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MouseButtonEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MouseButtonEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MouseButtonEvent(global::SharpSDL.MouseButtonEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MouseButtonEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.MouseButtonEvent.__Internal*) __Instance) = *((global::SharpSDL.MouseButtonEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.MouseButtonEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.MouseButtonEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.MouseButtonEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.MouseButtonEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.MouseButtonEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public uint WindowID
        {
            get
            {
                return ((global::SharpSDL.MouseButtonEvent.__Internal*) __Instance)->windowID;
            }

            set
            {
                ((global::SharpSDL.MouseButtonEvent.__Internal*)__Instance)->windowID = value;
            }
        }

        public uint Which
        {
            get
            {
                return ((global::SharpSDL.MouseButtonEvent.__Internal*) __Instance)->which;
            }

            set
            {
                ((global::SharpSDL.MouseButtonEvent.__Internal*)__Instance)->which = value;
            }
        }

        public byte Button
        {
            get
            {
                return ((global::SharpSDL.MouseButtonEvent.__Internal*) __Instance)->button;
            }

            set
            {
                ((global::SharpSDL.MouseButtonEvent.__Internal*)__Instance)->button = value;
            }
        }

        public byte State
        {
            get
            {
                return ((global::SharpSDL.MouseButtonEvent.__Internal*) __Instance)->state;
            }

            set
            {
                ((global::SharpSDL.MouseButtonEvent.__Internal*)__Instance)->state = value;
            }
        }

        public byte Clicks
        {
            get
            {
                return ((global::SharpSDL.MouseButtonEvent.__Internal*) __Instance)->clicks;
            }

            set
            {
                ((global::SharpSDL.MouseButtonEvent.__Internal*)__Instance)->clicks = value;
            }
        }

        public byte Padding1
        {
            get
            {
                return ((global::SharpSDL.MouseButtonEvent.__Internal*) __Instance)->padding1;
            }

            set
            {
                ((global::SharpSDL.MouseButtonEvent.__Internal*)__Instance)->padding1 = value;
            }
        }

        public int X
        {
            get
            {
                return ((global::SharpSDL.MouseButtonEvent.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::SharpSDL.MouseButtonEvent.__Internal*)__Instance)->x = value;
            }
        }

        public int Y
        {
            get
            {
                return ((global::SharpSDL.MouseButtonEvent.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::SharpSDL.MouseButtonEvent.__Internal*)__Instance)->y = value;
            }
        }
    }

    /// <summary>Mouse wheel event structure (event.wheel.*)</summary>
    public unsafe partial class MouseWheelEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 28)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal uint windowID;

            [FieldOffset(12)]
            internal uint which;

            [FieldOffset(16)]
            internal int x;

            [FieldOffset(20)]
            internal int y;

            [FieldOffset(24)]
            internal uint direction;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_MouseWheelEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.MouseWheelEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.MouseWheelEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.MouseWheelEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.MouseWheelEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.MouseWheelEvent __CreateInstance(global::SharpSDL.MouseWheelEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.MouseWheelEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.MouseWheelEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MouseWheelEvent.__Internal));
            *(global::SharpSDL.MouseWheelEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MouseWheelEvent(global::SharpSDL.MouseWheelEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MouseWheelEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MouseWheelEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MouseWheelEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MouseWheelEvent(global::SharpSDL.MouseWheelEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MouseWheelEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.MouseWheelEvent.__Internal*) __Instance) = *((global::SharpSDL.MouseWheelEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.MouseWheelEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.MouseWheelEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.MouseWheelEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.MouseWheelEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.MouseWheelEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public uint WindowID
        {
            get
            {
                return ((global::SharpSDL.MouseWheelEvent.__Internal*) __Instance)->windowID;
            }

            set
            {
                ((global::SharpSDL.MouseWheelEvent.__Internal*)__Instance)->windowID = value;
            }
        }

        public uint Which
        {
            get
            {
                return ((global::SharpSDL.MouseWheelEvent.__Internal*) __Instance)->which;
            }

            set
            {
                ((global::SharpSDL.MouseWheelEvent.__Internal*)__Instance)->which = value;
            }
        }

        public int X
        {
            get
            {
                return ((global::SharpSDL.MouseWheelEvent.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::SharpSDL.MouseWheelEvent.__Internal*)__Instance)->x = value;
            }
        }

        public int Y
        {
            get
            {
                return ((global::SharpSDL.MouseWheelEvent.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::SharpSDL.MouseWheelEvent.__Internal*)__Instance)->y = value;
            }
        }

        public uint Direction
        {
            get
            {
                return ((global::SharpSDL.MouseWheelEvent.__Internal*) __Instance)->direction;
            }

            set
            {
                ((global::SharpSDL.MouseWheelEvent.__Internal*)__Instance)->direction = value;
            }
        }
    }

    /// <summary>Joystick axis motion event structure (event.jaxis.*)</summary>
    public unsafe partial class JoyAxisEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal int which;

            [FieldOffset(12)]
            internal byte axis;

            [FieldOffset(13)]
            internal byte padding1;

            [FieldOffset(14)]
            internal byte padding2;

            [FieldOffset(15)]
            internal byte padding3;

            [FieldOffset(16)]
            internal short value;

            [FieldOffset(18)]
            internal ushort padding4;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_JoyAxisEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.JoyAxisEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.JoyAxisEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.JoyAxisEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.JoyAxisEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.JoyAxisEvent __CreateInstance(global::SharpSDL.JoyAxisEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.JoyAxisEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.JoyAxisEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.JoyAxisEvent.__Internal));
            *(global::SharpSDL.JoyAxisEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JoyAxisEvent(global::SharpSDL.JoyAxisEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected JoyAxisEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public JoyAxisEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.JoyAxisEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public JoyAxisEvent(global::SharpSDL.JoyAxisEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.JoyAxisEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.JoyAxisEvent.__Internal*) __Instance) = *((global::SharpSDL.JoyAxisEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.JoyAxisEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.JoyAxisEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.JoyAxisEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.JoyAxisEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.JoyAxisEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public int Which
        {
            get
            {
                return ((global::SharpSDL.JoyAxisEvent.__Internal*) __Instance)->which;
            }

            set
            {
                ((global::SharpSDL.JoyAxisEvent.__Internal*)__Instance)->which = value;
            }
        }

        public byte Axis
        {
            get
            {
                return ((global::SharpSDL.JoyAxisEvent.__Internal*) __Instance)->axis;
            }

            set
            {
                ((global::SharpSDL.JoyAxisEvent.__Internal*)__Instance)->axis = value;
            }
        }

        public byte Padding1
        {
            get
            {
                return ((global::SharpSDL.JoyAxisEvent.__Internal*) __Instance)->padding1;
            }

            set
            {
                ((global::SharpSDL.JoyAxisEvent.__Internal*)__Instance)->padding1 = value;
            }
        }

        public byte Padding2
        {
            get
            {
                return ((global::SharpSDL.JoyAxisEvent.__Internal*) __Instance)->padding2;
            }

            set
            {
                ((global::SharpSDL.JoyAxisEvent.__Internal*)__Instance)->padding2 = value;
            }
        }

        public byte Padding3
        {
            get
            {
                return ((global::SharpSDL.JoyAxisEvent.__Internal*) __Instance)->padding3;
            }

            set
            {
                ((global::SharpSDL.JoyAxisEvent.__Internal*)__Instance)->padding3 = value;
            }
        }

        public short Value
        {
            get
            {
                return ((global::SharpSDL.JoyAxisEvent.__Internal*) __Instance)->value;
            }

            set
            {
                ((global::SharpSDL.JoyAxisEvent.__Internal*)__Instance)->value = value;
            }
        }

        public ushort Padding4
        {
            get
            {
                return ((global::SharpSDL.JoyAxisEvent.__Internal*) __Instance)->padding4;
            }

            set
            {
                ((global::SharpSDL.JoyAxisEvent.__Internal*)__Instance)->padding4 = value;
            }
        }
    }

    /// <summary>Joystick trackball motion event structure (event.jball.*)</summary>
    public unsafe partial class JoyBallEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal int which;

            [FieldOffset(12)]
            internal byte ball;

            [FieldOffset(13)]
            internal byte padding1;

            [FieldOffset(14)]
            internal byte padding2;

            [FieldOffset(15)]
            internal byte padding3;

            [FieldOffset(16)]
            internal short xrel;

            [FieldOffset(18)]
            internal short yrel;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_JoyBallEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.JoyBallEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.JoyBallEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.JoyBallEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.JoyBallEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.JoyBallEvent __CreateInstance(global::SharpSDL.JoyBallEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.JoyBallEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.JoyBallEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.JoyBallEvent.__Internal));
            *(global::SharpSDL.JoyBallEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JoyBallEvent(global::SharpSDL.JoyBallEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected JoyBallEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public JoyBallEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.JoyBallEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public JoyBallEvent(global::SharpSDL.JoyBallEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.JoyBallEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.JoyBallEvent.__Internal*) __Instance) = *((global::SharpSDL.JoyBallEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.JoyBallEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.JoyBallEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.JoyBallEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.JoyBallEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.JoyBallEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public int Which
        {
            get
            {
                return ((global::SharpSDL.JoyBallEvent.__Internal*) __Instance)->which;
            }

            set
            {
                ((global::SharpSDL.JoyBallEvent.__Internal*)__Instance)->which = value;
            }
        }

        public byte Ball
        {
            get
            {
                return ((global::SharpSDL.JoyBallEvent.__Internal*) __Instance)->ball;
            }

            set
            {
                ((global::SharpSDL.JoyBallEvent.__Internal*)__Instance)->ball = value;
            }
        }

        public byte Padding1
        {
            get
            {
                return ((global::SharpSDL.JoyBallEvent.__Internal*) __Instance)->padding1;
            }

            set
            {
                ((global::SharpSDL.JoyBallEvent.__Internal*)__Instance)->padding1 = value;
            }
        }

        public byte Padding2
        {
            get
            {
                return ((global::SharpSDL.JoyBallEvent.__Internal*) __Instance)->padding2;
            }

            set
            {
                ((global::SharpSDL.JoyBallEvent.__Internal*)__Instance)->padding2 = value;
            }
        }

        public byte Padding3
        {
            get
            {
                return ((global::SharpSDL.JoyBallEvent.__Internal*) __Instance)->padding3;
            }

            set
            {
                ((global::SharpSDL.JoyBallEvent.__Internal*)__Instance)->padding3 = value;
            }
        }

        public short Xrel
        {
            get
            {
                return ((global::SharpSDL.JoyBallEvent.__Internal*) __Instance)->xrel;
            }

            set
            {
                ((global::SharpSDL.JoyBallEvent.__Internal*)__Instance)->xrel = value;
            }
        }

        public short Yrel
        {
            get
            {
                return ((global::SharpSDL.JoyBallEvent.__Internal*) __Instance)->yrel;
            }

            set
            {
                ((global::SharpSDL.JoyBallEvent.__Internal*)__Instance)->yrel = value;
            }
        }
    }

    /// <summary>Joystick hat position change event structure (event.jhat.*)</summary>
    public unsafe partial class JoyHatEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal int which;

            [FieldOffset(12)]
            internal byte hat;

            [FieldOffset(13)]
            internal byte value;

            [FieldOffset(14)]
            internal byte padding1;

            [FieldOffset(15)]
            internal byte padding2;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_JoyHatEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.JoyHatEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.JoyHatEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.JoyHatEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.JoyHatEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.JoyHatEvent __CreateInstance(global::SharpSDL.JoyHatEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.JoyHatEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.JoyHatEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.JoyHatEvent.__Internal));
            *(global::SharpSDL.JoyHatEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JoyHatEvent(global::SharpSDL.JoyHatEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected JoyHatEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public JoyHatEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.JoyHatEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public JoyHatEvent(global::SharpSDL.JoyHatEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.JoyHatEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.JoyHatEvent.__Internal*) __Instance) = *((global::SharpSDL.JoyHatEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.JoyHatEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.JoyHatEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.JoyHatEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.JoyHatEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.JoyHatEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public int Which
        {
            get
            {
                return ((global::SharpSDL.JoyHatEvent.__Internal*) __Instance)->which;
            }

            set
            {
                ((global::SharpSDL.JoyHatEvent.__Internal*)__Instance)->which = value;
            }
        }

        public byte Hat
        {
            get
            {
                return ((global::SharpSDL.JoyHatEvent.__Internal*) __Instance)->hat;
            }

            set
            {
                ((global::SharpSDL.JoyHatEvent.__Internal*)__Instance)->hat = value;
            }
        }

        public byte Value
        {
            get
            {
                return ((global::SharpSDL.JoyHatEvent.__Internal*) __Instance)->value;
            }

            set
            {
                ((global::SharpSDL.JoyHatEvent.__Internal*)__Instance)->value = value;
            }
        }

        public byte Padding1
        {
            get
            {
                return ((global::SharpSDL.JoyHatEvent.__Internal*) __Instance)->padding1;
            }

            set
            {
                ((global::SharpSDL.JoyHatEvent.__Internal*)__Instance)->padding1 = value;
            }
        }

        public byte Padding2
        {
            get
            {
                return ((global::SharpSDL.JoyHatEvent.__Internal*) __Instance)->padding2;
            }

            set
            {
                ((global::SharpSDL.JoyHatEvent.__Internal*)__Instance)->padding2 = value;
            }
        }
    }

    /// <summary>Joystick button event structure (event.jbutton.*)</summary>
    public unsafe partial class JoyButtonEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal int which;

            [FieldOffset(12)]
            internal byte button;

            [FieldOffset(13)]
            internal byte state;

            [FieldOffset(14)]
            internal byte padding1;

            [FieldOffset(15)]
            internal byte padding2;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_JoyButtonEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.JoyButtonEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.JoyButtonEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.JoyButtonEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.JoyButtonEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.JoyButtonEvent __CreateInstance(global::SharpSDL.JoyButtonEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.JoyButtonEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.JoyButtonEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.JoyButtonEvent.__Internal));
            *(global::SharpSDL.JoyButtonEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JoyButtonEvent(global::SharpSDL.JoyButtonEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected JoyButtonEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public JoyButtonEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.JoyButtonEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public JoyButtonEvent(global::SharpSDL.JoyButtonEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.JoyButtonEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.JoyButtonEvent.__Internal*) __Instance) = *((global::SharpSDL.JoyButtonEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.JoyButtonEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.JoyButtonEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.JoyButtonEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.JoyButtonEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.JoyButtonEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public int Which
        {
            get
            {
                return ((global::SharpSDL.JoyButtonEvent.__Internal*) __Instance)->which;
            }

            set
            {
                ((global::SharpSDL.JoyButtonEvent.__Internal*)__Instance)->which = value;
            }
        }

        public byte Button
        {
            get
            {
                return ((global::SharpSDL.JoyButtonEvent.__Internal*) __Instance)->button;
            }

            set
            {
                ((global::SharpSDL.JoyButtonEvent.__Internal*)__Instance)->button = value;
            }
        }

        public byte State
        {
            get
            {
                return ((global::SharpSDL.JoyButtonEvent.__Internal*) __Instance)->state;
            }

            set
            {
                ((global::SharpSDL.JoyButtonEvent.__Internal*)__Instance)->state = value;
            }
        }

        public byte Padding1
        {
            get
            {
                return ((global::SharpSDL.JoyButtonEvent.__Internal*) __Instance)->padding1;
            }

            set
            {
                ((global::SharpSDL.JoyButtonEvent.__Internal*)__Instance)->padding1 = value;
            }
        }

        public byte Padding2
        {
            get
            {
                return ((global::SharpSDL.JoyButtonEvent.__Internal*) __Instance)->padding2;
            }

            set
            {
                ((global::SharpSDL.JoyButtonEvent.__Internal*)__Instance)->padding2 = value;
            }
        }
    }

    /// <summary>Joystick device event structure (event.jdevice.*)</summary>
    public unsafe partial class JoyDeviceEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal int which;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_JoyDeviceEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.JoyDeviceEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.JoyDeviceEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.JoyDeviceEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.JoyDeviceEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.JoyDeviceEvent __CreateInstance(global::SharpSDL.JoyDeviceEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.JoyDeviceEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.JoyDeviceEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.JoyDeviceEvent.__Internal));
            *(global::SharpSDL.JoyDeviceEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JoyDeviceEvent(global::SharpSDL.JoyDeviceEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected JoyDeviceEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public JoyDeviceEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.JoyDeviceEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public JoyDeviceEvent(global::SharpSDL.JoyDeviceEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.JoyDeviceEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.JoyDeviceEvent.__Internal*) __Instance) = *((global::SharpSDL.JoyDeviceEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.JoyDeviceEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.JoyDeviceEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.JoyDeviceEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.JoyDeviceEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.JoyDeviceEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public int Which
        {
            get
            {
                return ((global::SharpSDL.JoyDeviceEvent.__Internal*) __Instance)->which;
            }

            set
            {
                ((global::SharpSDL.JoyDeviceEvent.__Internal*)__Instance)->which = value;
            }
        }
    }

    /// <summary>Game controller axis motion event structure (event.caxis.*)</summary>
    public unsafe partial class ControllerAxisEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal int which;

            [FieldOffset(12)]
            internal byte axis;

            [FieldOffset(13)]
            internal byte padding1;

            [FieldOffset(14)]
            internal byte padding2;

            [FieldOffset(15)]
            internal byte padding3;

            [FieldOffset(16)]
            internal short value;

            [FieldOffset(18)]
            internal ushort padding4;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_ControllerAxisEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.ControllerAxisEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.ControllerAxisEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.ControllerAxisEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.ControllerAxisEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.ControllerAxisEvent __CreateInstance(global::SharpSDL.ControllerAxisEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.ControllerAxisEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.ControllerAxisEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.ControllerAxisEvent.__Internal));
            *(global::SharpSDL.ControllerAxisEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ControllerAxisEvent(global::SharpSDL.ControllerAxisEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ControllerAxisEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ControllerAxisEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.ControllerAxisEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ControllerAxisEvent(global::SharpSDL.ControllerAxisEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.ControllerAxisEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.ControllerAxisEvent.__Internal*) __Instance) = *((global::SharpSDL.ControllerAxisEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.ControllerAxisEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.ControllerAxisEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.ControllerAxisEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.ControllerAxisEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.ControllerAxisEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public int Which
        {
            get
            {
                return ((global::SharpSDL.ControllerAxisEvent.__Internal*) __Instance)->which;
            }

            set
            {
                ((global::SharpSDL.ControllerAxisEvent.__Internal*)__Instance)->which = value;
            }
        }

        public byte Axis
        {
            get
            {
                return ((global::SharpSDL.ControllerAxisEvent.__Internal*) __Instance)->axis;
            }

            set
            {
                ((global::SharpSDL.ControllerAxisEvent.__Internal*)__Instance)->axis = value;
            }
        }

        public byte Padding1
        {
            get
            {
                return ((global::SharpSDL.ControllerAxisEvent.__Internal*) __Instance)->padding1;
            }

            set
            {
                ((global::SharpSDL.ControllerAxisEvent.__Internal*)__Instance)->padding1 = value;
            }
        }

        public byte Padding2
        {
            get
            {
                return ((global::SharpSDL.ControllerAxisEvent.__Internal*) __Instance)->padding2;
            }

            set
            {
                ((global::SharpSDL.ControllerAxisEvent.__Internal*)__Instance)->padding2 = value;
            }
        }

        public byte Padding3
        {
            get
            {
                return ((global::SharpSDL.ControllerAxisEvent.__Internal*) __Instance)->padding3;
            }

            set
            {
                ((global::SharpSDL.ControllerAxisEvent.__Internal*)__Instance)->padding3 = value;
            }
        }

        public short Value
        {
            get
            {
                return ((global::SharpSDL.ControllerAxisEvent.__Internal*) __Instance)->value;
            }

            set
            {
                ((global::SharpSDL.ControllerAxisEvent.__Internal*)__Instance)->value = value;
            }
        }

        public ushort Padding4
        {
            get
            {
                return ((global::SharpSDL.ControllerAxisEvent.__Internal*) __Instance)->padding4;
            }

            set
            {
                ((global::SharpSDL.ControllerAxisEvent.__Internal*)__Instance)->padding4 = value;
            }
        }
    }

    /// <summary>Game controller button event structure (event.cbutton.*)</summary>
    public unsafe partial class ControllerButtonEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal int which;

            [FieldOffset(12)]
            internal byte button;

            [FieldOffset(13)]
            internal byte state;

            [FieldOffset(14)]
            internal byte padding1;

            [FieldOffset(15)]
            internal byte padding2;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_ControllerButtonEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.ControllerButtonEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.ControllerButtonEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.ControllerButtonEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.ControllerButtonEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.ControllerButtonEvent __CreateInstance(global::SharpSDL.ControllerButtonEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.ControllerButtonEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.ControllerButtonEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.ControllerButtonEvent.__Internal));
            *(global::SharpSDL.ControllerButtonEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ControllerButtonEvent(global::SharpSDL.ControllerButtonEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ControllerButtonEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ControllerButtonEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.ControllerButtonEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ControllerButtonEvent(global::SharpSDL.ControllerButtonEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.ControllerButtonEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.ControllerButtonEvent.__Internal*) __Instance) = *((global::SharpSDL.ControllerButtonEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.ControllerButtonEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.ControllerButtonEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.ControllerButtonEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.ControllerButtonEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.ControllerButtonEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public int Which
        {
            get
            {
                return ((global::SharpSDL.ControllerButtonEvent.__Internal*) __Instance)->which;
            }

            set
            {
                ((global::SharpSDL.ControllerButtonEvent.__Internal*)__Instance)->which = value;
            }
        }

        public byte Button
        {
            get
            {
                return ((global::SharpSDL.ControllerButtonEvent.__Internal*) __Instance)->button;
            }

            set
            {
                ((global::SharpSDL.ControllerButtonEvent.__Internal*)__Instance)->button = value;
            }
        }

        public byte State
        {
            get
            {
                return ((global::SharpSDL.ControllerButtonEvent.__Internal*) __Instance)->state;
            }

            set
            {
                ((global::SharpSDL.ControllerButtonEvent.__Internal*)__Instance)->state = value;
            }
        }

        public byte Padding1
        {
            get
            {
                return ((global::SharpSDL.ControllerButtonEvent.__Internal*) __Instance)->padding1;
            }

            set
            {
                ((global::SharpSDL.ControllerButtonEvent.__Internal*)__Instance)->padding1 = value;
            }
        }

        public byte Padding2
        {
            get
            {
                return ((global::SharpSDL.ControllerButtonEvent.__Internal*) __Instance)->padding2;
            }

            set
            {
                ((global::SharpSDL.ControllerButtonEvent.__Internal*)__Instance)->padding2 = value;
            }
        }
    }

    /// <summary>Controller device event structure (event.cdevice.*)</summary>
    public unsafe partial class ControllerDeviceEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal int which;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_ControllerDeviceEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.ControllerDeviceEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.ControllerDeviceEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.ControllerDeviceEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.ControllerDeviceEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.ControllerDeviceEvent __CreateInstance(global::SharpSDL.ControllerDeviceEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.ControllerDeviceEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.ControllerDeviceEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.ControllerDeviceEvent.__Internal));
            *(global::SharpSDL.ControllerDeviceEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ControllerDeviceEvent(global::SharpSDL.ControllerDeviceEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ControllerDeviceEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ControllerDeviceEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.ControllerDeviceEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ControllerDeviceEvent(global::SharpSDL.ControllerDeviceEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.ControllerDeviceEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.ControllerDeviceEvent.__Internal*) __Instance) = *((global::SharpSDL.ControllerDeviceEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.ControllerDeviceEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.ControllerDeviceEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.ControllerDeviceEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.ControllerDeviceEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.ControllerDeviceEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public int Which
        {
            get
            {
                return ((global::SharpSDL.ControllerDeviceEvent.__Internal*) __Instance)->which;
            }

            set
            {
                ((global::SharpSDL.ControllerDeviceEvent.__Internal*)__Instance)->which = value;
            }
        }
    }

    /// <summary>Audio device event structure (event.adevice.*)</summary>
    public unsafe partial class AudioDeviceEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal uint which;

            [FieldOffset(12)]
            internal byte iscapture;

            [FieldOffset(13)]
            internal byte padding1;

            [FieldOffset(14)]
            internal byte padding2;

            [FieldOffset(15)]
            internal byte padding3;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_AudioDeviceEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.AudioDeviceEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.AudioDeviceEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.AudioDeviceEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.AudioDeviceEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.AudioDeviceEvent __CreateInstance(global::SharpSDL.AudioDeviceEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.AudioDeviceEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.AudioDeviceEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.AudioDeviceEvent.__Internal));
            *(global::SharpSDL.AudioDeviceEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AudioDeviceEvent(global::SharpSDL.AudioDeviceEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AudioDeviceEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AudioDeviceEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.AudioDeviceEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AudioDeviceEvent(global::SharpSDL.AudioDeviceEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.AudioDeviceEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.AudioDeviceEvent.__Internal*) __Instance) = *((global::SharpSDL.AudioDeviceEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.AudioDeviceEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.AudioDeviceEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.AudioDeviceEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.AudioDeviceEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.AudioDeviceEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public uint Which
        {
            get
            {
                return ((global::SharpSDL.AudioDeviceEvent.__Internal*) __Instance)->which;
            }

            set
            {
                ((global::SharpSDL.AudioDeviceEvent.__Internal*)__Instance)->which = value;
            }
        }

        public byte Iscapture
        {
            get
            {
                return ((global::SharpSDL.AudioDeviceEvent.__Internal*) __Instance)->iscapture;
            }

            set
            {
                ((global::SharpSDL.AudioDeviceEvent.__Internal*)__Instance)->iscapture = value;
            }
        }

        public byte Padding1
        {
            get
            {
                return ((global::SharpSDL.AudioDeviceEvent.__Internal*) __Instance)->padding1;
            }

            set
            {
                ((global::SharpSDL.AudioDeviceEvent.__Internal*)__Instance)->padding1 = value;
            }
        }

        public byte Padding2
        {
            get
            {
                return ((global::SharpSDL.AudioDeviceEvent.__Internal*) __Instance)->padding2;
            }

            set
            {
                ((global::SharpSDL.AudioDeviceEvent.__Internal*)__Instance)->padding2 = value;
            }
        }

        public byte Padding3
        {
            get
            {
                return ((global::SharpSDL.AudioDeviceEvent.__Internal*) __Instance)->padding3;
            }

            set
            {
                ((global::SharpSDL.AudioDeviceEvent.__Internal*)__Instance)->padding3 = value;
            }
        }
    }

    /// <summary>Touch finger event structure (event.tfinger.*)</summary>
    public unsafe partial class TouchFingerEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal long touchId;

            [FieldOffset(16)]
            internal long fingerId;

            [FieldOffset(24)]
            internal float x;

            [FieldOffset(28)]
            internal float y;

            [FieldOffset(32)]
            internal float dx;

            [FieldOffset(36)]
            internal float dy;

            [FieldOffset(40)]
            internal float pressure;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_TouchFingerEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.TouchFingerEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.TouchFingerEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.TouchFingerEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.TouchFingerEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.TouchFingerEvent __CreateInstance(global::SharpSDL.TouchFingerEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.TouchFingerEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.TouchFingerEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.TouchFingerEvent.__Internal));
            *(global::SharpSDL.TouchFingerEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TouchFingerEvent(global::SharpSDL.TouchFingerEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TouchFingerEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TouchFingerEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.TouchFingerEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TouchFingerEvent(global::SharpSDL.TouchFingerEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.TouchFingerEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.TouchFingerEvent.__Internal*) __Instance) = *((global::SharpSDL.TouchFingerEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.TouchFingerEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.TouchFingerEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.TouchFingerEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.TouchFingerEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.TouchFingerEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public long TouchId
        {
            get
            {
                return ((global::SharpSDL.TouchFingerEvent.__Internal*) __Instance)->touchId;
            }

            set
            {
                ((global::SharpSDL.TouchFingerEvent.__Internal*)__Instance)->touchId = value;
            }
        }

        public long FingerId
        {
            get
            {
                return ((global::SharpSDL.TouchFingerEvent.__Internal*) __Instance)->fingerId;
            }

            set
            {
                ((global::SharpSDL.TouchFingerEvent.__Internal*)__Instance)->fingerId = value;
            }
        }

        public float X
        {
            get
            {
                return ((global::SharpSDL.TouchFingerEvent.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::SharpSDL.TouchFingerEvent.__Internal*)__Instance)->x = value;
            }
        }

        public float Y
        {
            get
            {
                return ((global::SharpSDL.TouchFingerEvent.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::SharpSDL.TouchFingerEvent.__Internal*)__Instance)->y = value;
            }
        }

        public float Dx
        {
            get
            {
                return ((global::SharpSDL.TouchFingerEvent.__Internal*) __Instance)->dx;
            }

            set
            {
                ((global::SharpSDL.TouchFingerEvent.__Internal*)__Instance)->dx = value;
            }
        }

        public float Dy
        {
            get
            {
                return ((global::SharpSDL.TouchFingerEvent.__Internal*) __Instance)->dy;
            }

            set
            {
                ((global::SharpSDL.TouchFingerEvent.__Internal*)__Instance)->dy = value;
            }
        }

        public float Pressure
        {
            get
            {
                return ((global::SharpSDL.TouchFingerEvent.__Internal*) __Instance)->pressure;
            }

            set
            {
                ((global::SharpSDL.TouchFingerEvent.__Internal*)__Instance)->pressure = value;
            }
        }
    }

    /// <summary>Multiple Finger Gesture Event (event.mgesture.*)</summary>
    public unsafe partial class MultiGestureEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal long touchId;

            [FieldOffset(16)]
            internal float dTheta;

            [FieldOffset(20)]
            internal float dDist;

            [FieldOffset(24)]
            internal float x;

            [FieldOffset(28)]
            internal float y;

            [FieldOffset(32)]
            internal ushort numFingers;

            [FieldOffset(34)]
            internal ushort padding;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_MultiGestureEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.MultiGestureEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.MultiGestureEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.MultiGestureEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.MultiGestureEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.MultiGestureEvent __CreateInstance(global::SharpSDL.MultiGestureEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.MultiGestureEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.MultiGestureEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MultiGestureEvent.__Internal));
            *(global::SharpSDL.MultiGestureEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MultiGestureEvent(global::SharpSDL.MultiGestureEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MultiGestureEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MultiGestureEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MultiGestureEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MultiGestureEvent(global::SharpSDL.MultiGestureEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MultiGestureEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.MultiGestureEvent.__Internal*) __Instance) = *((global::SharpSDL.MultiGestureEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.MultiGestureEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.MultiGestureEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.MultiGestureEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.MultiGestureEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.MultiGestureEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public long TouchId
        {
            get
            {
                return ((global::SharpSDL.MultiGestureEvent.__Internal*) __Instance)->touchId;
            }

            set
            {
                ((global::SharpSDL.MultiGestureEvent.__Internal*)__Instance)->touchId = value;
            }
        }

        public float DTheta
        {
            get
            {
                return ((global::SharpSDL.MultiGestureEvent.__Internal*) __Instance)->dTheta;
            }

            set
            {
                ((global::SharpSDL.MultiGestureEvent.__Internal*)__Instance)->dTheta = value;
            }
        }

        public float DDist
        {
            get
            {
                return ((global::SharpSDL.MultiGestureEvent.__Internal*) __Instance)->dDist;
            }

            set
            {
                ((global::SharpSDL.MultiGestureEvent.__Internal*)__Instance)->dDist = value;
            }
        }

        public float X
        {
            get
            {
                return ((global::SharpSDL.MultiGestureEvent.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::SharpSDL.MultiGestureEvent.__Internal*)__Instance)->x = value;
            }
        }

        public float Y
        {
            get
            {
                return ((global::SharpSDL.MultiGestureEvent.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::SharpSDL.MultiGestureEvent.__Internal*)__Instance)->y = value;
            }
        }

        public ushort NumFingers
        {
            get
            {
                return ((global::SharpSDL.MultiGestureEvent.__Internal*) __Instance)->numFingers;
            }

            set
            {
                ((global::SharpSDL.MultiGestureEvent.__Internal*)__Instance)->numFingers = value;
            }
        }

        public ushort Padding
        {
            get
            {
                return ((global::SharpSDL.MultiGestureEvent.__Internal*) __Instance)->padding;
            }

            set
            {
                ((global::SharpSDL.MultiGestureEvent.__Internal*)__Instance)->padding = value;
            }
        }
    }

    /// <summary>Dollar Gesture Event (event.dgesture.*)</summary>
    public unsafe partial class DollarGestureEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal long touchId;

            [FieldOffset(16)]
            internal long gestureId;

            [FieldOffset(24)]
            internal uint numFingers;

            [FieldOffset(28)]
            internal float error;

            [FieldOffset(32)]
            internal float x;

            [FieldOffset(36)]
            internal float y;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_DollarGestureEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.DollarGestureEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.DollarGestureEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.DollarGestureEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.DollarGestureEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.DollarGestureEvent __CreateInstance(global::SharpSDL.DollarGestureEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.DollarGestureEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.DollarGestureEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.DollarGestureEvent.__Internal));
            *(global::SharpSDL.DollarGestureEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DollarGestureEvent(global::SharpSDL.DollarGestureEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DollarGestureEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DollarGestureEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.DollarGestureEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DollarGestureEvent(global::SharpSDL.DollarGestureEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.DollarGestureEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.DollarGestureEvent.__Internal*) __Instance) = *((global::SharpSDL.DollarGestureEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.DollarGestureEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.DollarGestureEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.DollarGestureEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.DollarGestureEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.DollarGestureEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public long TouchId
        {
            get
            {
                return ((global::SharpSDL.DollarGestureEvent.__Internal*) __Instance)->touchId;
            }

            set
            {
                ((global::SharpSDL.DollarGestureEvent.__Internal*)__Instance)->touchId = value;
            }
        }

        public long GestureId
        {
            get
            {
                return ((global::SharpSDL.DollarGestureEvent.__Internal*) __Instance)->gestureId;
            }

            set
            {
                ((global::SharpSDL.DollarGestureEvent.__Internal*)__Instance)->gestureId = value;
            }
        }

        public uint NumFingers
        {
            get
            {
                return ((global::SharpSDL.DollarGestureEvent.__Internal*) __Instance)->numFingers;
            }

            set
            {
                ((global::SharpSDL.DollarGestureEvent.__Internal*)__Instance)->numFingers = value;
            }
        }

        public float Error
        {
            get
            {
                return ((global::SharpSDL.DollarGestureEvent.__Internal*) __Instance)->error;
            }

            set
            {
                ((global::SharpSDL.DollarGestureEvent.__Internal*)__Instance)->error = value;
            }
        }

        public float X
        {
            get
            {
                return ((global::SharpSDL.DollarGestureEvent.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::SharpSDL.DollarGestureEvent.__Internal*)__Instance)->x = value;
            }
        }

        public float Y
        {
            get
            {
                return ((global::SharpSDL.DollarGestureEvent.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::SharpSDL.DollarGestureEvent.__Internal*)__Instance)->y = value;
            }
        }
    }

    /// <summary>
/// <para>An event used to request a file open by the system (event.drop.*)</para>
/// <para>This event is enabled by default, you can disable it with SDL_EventState().</para>
/// </summary>
/// <remarks>If this event is enabled, you must free the filename in the event.</remarks>
    public unsafe partial class DropEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal global::System.IntPtr file;

            [FieldOffset(16)]
            internal uint windowID;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_DropEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.DropEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.DropEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.DropEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.DropEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.DropEvent __CreateInstance(global::SharpSDL.DropEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.DropEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.DropEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.DropEvent.__Internal));
            *(global::SharpSDL.DropEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DropEvent(global::SharpSDL.DropEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DropEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DropEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.DropEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DropEvent(global::SharpSDL.DropEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.DropEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.DropEvent.__Internal*) __Instance) = *((global::SharpSDL.DropEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.DropEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.DropEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.DropEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.DropEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.DropEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public sbyte* File
        {
            get
            {
                return (sbyte*) ((global::SharpSDL.DropEvent.__Internal*) __Instance)->file;
            }

            set
            {
                ((global::SharpSDL.DropEvent.__Internal*)__Instance)->file = (global::System.IntPtr) value;
            }
        }

        public uint WindowID
        {
            get
            {
                return ((global::SharpSDL.DropEvent.__Internal*) __Instance)->windowID;
            }

            set
            {
                ((global::SharpSDL.DropEvent.__Internal*)__Instance)->windowID = value;
            }
        }
    }

    /// <summary>Sensor event structure (event.sensor.*)</summary>
    public unsafe partial class SensorEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 36)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal int which;

            [FieldOffset(12)]
            internal fixed float data[6];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_SensorEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.SensorEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.SensorEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.SensorEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.SensorEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.SensorEvent __CreateInstance(global::SharpSDL.SensorEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.SensorEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.SensorEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.SensorEvent.__Internal));
            *(global::SharpSDL.SensorEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SensorEvent(global::SharpSDL.SensorEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SensorEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public SensorEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.SensorEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public SensorEvent(global::SharpSDL.SensorEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.SensorEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.SensorEvent.__Internal*) __Instance) = *((global::SharpSDL.SensorEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.SensorEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.SensorEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.SensorEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.SensorEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.SensorEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public int Which
        {
            get
            {
                return ((global::SharpSDL.SensorEvent.__Internal*) __Instance)->which;
            }

            set
            {
                ((global::SharpSDL.SensorEvent.__Internal*)__Instance)->which = value;
            }
        }

        public float[] Data
        {
            get
            {
                float[] __value = null;
                if (((global::SharpSDL.SensorEvent.__Internal*) __Instance)->data != null)
                {
                    __value = new float[6];
                    for (int i = 0; i < 6; i++)
                        __value[i] = ((global::SharpSDL.SensorEvent.__Internal*) __Instance)->data[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 6; i++)
                        ((global::SharpSDL.SensorEvent.__Internal*)__Instance)->data[i] = value[i];
                }
            }
        }
    }

    /// <summary>The &quot;quit requested&quot; event</summary>
    public unsafe partial class QuitEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_QuitEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.QuitEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.QuitEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.QuitEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.QuitEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.QuitEvent __CreateInstance(global::SharpSDL.QuitEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.QuitEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.QuitEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.QuitEvent.__Internal));
            *(global::SharpSDL.QuitEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QuitEvent(global::SharpSDL.QuitEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected QuitEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public QuitEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.QuitEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public QuitEvent(global::SharpSDL.QuitEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.QuitEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.QuitEvent.__Internal*) __Instance) = *((global::SharpSDL.QuitEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.QuitEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.QuitEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.QuitEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.QuitEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.QuitEvent.__Internal*)__Instance)->timestamp = value;
            }
        }
    }

    /// <summary>OS Specific event</summary>
    public unsafe partial class OSEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_OSEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.OSEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.OSEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.OSEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.OSEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.OSEvent __CreateInstance(global::SharpSDL.OSEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.OSEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.OSEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.OSEvent.__Internal));
            *(global::SharpSDL.OSEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OSEvent(global::SharpSDL.OSEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected OSEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public OSEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.OSEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public OSEvent(global::SharpSDL.OSEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.OSEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.OSEvent.__Internal*) __Instance) = *((global::SharpSDL.OSEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.OSEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.OSEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.OSEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.OSEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.OSEvent.__Internal*)__Instance)->timestamp = value;
            }
        }
    }

    /// <summary>A user-defined event type (event.user.*)</summary>
    public unsafe partial class UserEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal uint windowID;

            [FieldOffset(12)]
            internal int code;

            [FieldOffset(16)]
            internal global::System.IntPtr data1;

            [FieldOffset(24)]
            internal global::System.IntPtr data2;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_UserEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.UserEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.UserEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.UserEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.UserEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.UserEvent __CreateInstance(global::SharpSDL.UserEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.UserEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.UserEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.UserEvent.__Internal));
            *(global::SharpSDL.UserEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private UserEvent(global::SharpSDL.UserEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UserEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public UserEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.UserEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public UserEvent(global::SharpSDL.UserEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.UserEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.UserEvent.__Internal*) __Instance) = *((global::SharpSDL.UserEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.UserEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.UserEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.UserEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.UserEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.UserEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public uint WindowID
        {
            get
            {
                return ((global::SharpSDL.UserEvent.__Internal*) __Instance)->windowID;
            }

            set
            {
                ((global::SharpSDL.UserEvent.__Internal*)__Instance)->windowID = value;
            }
        }

        public int Code
        {
            get
            {
                return ((global::SharpSDL.UserEvent.__Internal*) __Instance)->code;
            }

            set
            {
                ((global::SharpSDL.UserEvent.__Internal*)__Instance)->code = value;
            }
        }

        public global::System.IntPtr Data1
        {
            get
            {
                return ((global::SharpSDL.UserEvent.__Internal*) __Instance)->data1;
            }

            set
            {
                ((global::SharpSDL.UserEvent.__Internal*)__Instance)->data1 = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr Data2
        {
            get
            {
                return ((global::SharpSDL.UserEvent.__Internal*) __Instance)->data2;
            }

            set
            {
                ((global::SharpSDL.UserEvent.__Internal*)__Instance)->data2 = (global::System.IntPtr) value;
            }
        }
    }

    /// <summary>
/// <para>A video driver dependent system event (event.syswm.*)</para>
/// <para>This event is disabled by default, you can enable it with SDL_EventState()</para>
/// </summary>
/// <remarks>If you want to use this event, you should include SDL_syswm.h.</remarks>
    public unsafe partial class SysWMEvent : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint timestamp;

            [FieldOffset(8)]
            internal global::System.IntPtr msg;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_SysWMEvent@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.SysWMEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.SysWMEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.SysWMEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.SysWMEvent(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.SysWMEvent __CreateInstance(global::SharpSDL.SysWMEvent.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.SysWMEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.SysWMEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.SysWMEvent.__Internal));
            *(global::SharpSDL.SysWMEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SysWMEvent(global::SharpSDL.SysWMEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SysWMEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public SysWMEvent()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.SysWMEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public SysWMEvent(global::SharpSDL.SysWMEvent _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.SysWMEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.SysWMEvent.__Internal*) __Instance) = *((global::SharpSDL.SysWMEvent.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.SysWMEvent __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::SharpSDL.SysWMEvent.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::SharpSDL.SysWMEvent.__Internal*)__Instance)->type = value;
            }
        }

        public uint Timestamp
        {
            get
            {
                return ((global::SharpSDL.SysWMEvent.__Internal*) __Instance)->timestamp;
            }

            set
            {
                ((global::SharpSDL.SysWMEvent.__Internal*)__Instance)->timestamp = value;
            }
        }

        public global::SharpSDL.SysWMmsg Msg
        {
            get
            {
                global::SharpSDL.SysWMmsg __result0;
                if (((global::SharpSDL.SysWMEvent.__Internal*) __Instance)->msg == IntPtr.Zero) __result0 = null;
                else if (global::SharpSDL.SysWMmsg.NativeToManagedMap.ContainsKey(((global::SharpSDL.SysWMEvent.__Internal*) __Instance)->msg))
                    __result0 = (global::SharpSDL.SysWMmsg) global::SharpSDL.SysWMmsg.NativeToManagedMap[((global::SharpSDL.SysWMEvent.__Internal*) __Instance)->msg];
                else __result0 = global::SharpSDL.SysWMmsg.__CreateInstance(((global::SharpSDL.SysWMEvent.__Internal*) __Instance)->msg);
                return __result0;
            }

            set
            {
                ((global::SharpSDL.SysWMEvent.__Internal*)__Instance)->msg = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    /// <summary>General event structure</summary>
    public unsafe partial struct Event
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(0)]
            internal global::SharpSDL.CommonEvent.__Internal common;

            [FieldOffset(0)]
            internal global::SharpSDL.DisplayEvent.__Internal display;

            [FieldOffset(0)]
            internal global::SharpSDL.WindowEvent.__Internal window;

            [FieldOffset(0)]
            internal global::SharpSDL.KeyboardEvent.__Internal key;

            [FieldOffset(0)]
            internal global::SharpSDL.TextEditingEvent.__Internal edit;

            [FieldOffset(0)]
            internal global::SharpSDL.TextInputEvent.__Internal text;

            [FieldOffset(0)]
            internal global::SharpSDL.MouseMotionEvent.__Internal motion;

            [FieldOffset(0)]
            internal global::SharpSDL.MouseButtonEvent.__Internal button;

            [FieldOffset(0)]
            internal global::SharpSDL.MouseWheelEvent.__Internal wheel;

            [FieldOffset(0)]
            internal global::SharpSDL.JoyAxisEvent.__Internal jaxis;

            [FieldOffset(0)]
            internal global::SharpSDL.JoyBallEvent.__Internal jball;

            [FieldOffset(0)]
            internal global::SharpSDL.JoyHatEvent.__Internal jhat;

            [FieldOffset(0)]
            internal global::SharpSDL.JoyButtonEvent.__Internal jbutton;

            [FieldOffset(0)]
            internal global::SharpSDL.JoyDeviceEvent.__Internal jdevice;

            [FieldOffset(0)]
            internal global::SharpSDL.ControllerAxisEvent.__Internal caxis;

            [FieldOffset(0)]
            internal global::SharpSDL.ControllerButtonEvent.__Internal cbutton;

            [FieldOffset(0)]
            internal global::SharpSDL.ControllerDeviceEvent.__Internal cdevice;

            [FieldOffset(0)]
            internal global::SharpSDL.AudioDeviceEvent.__Internal adevice;

            [FieldOffset(0)]
            internal global::SharpSDL.SensorEvent.__Internal sensor;

            [FieldOffset(0)]
            internal global::SharpSDL.QuitEvent.__Internal quit;

            [FieldOffset(0)]
            internal global::SharpSDL.UserEvent.__Internal user;

            [FieldOffset(0)]
            internal global::SharpSDL.SysWMEvent.__Internal syswm;

            [FieldOffset(0)]
            internal global::SharpSDL.TouchFingerEvent.__Internal tfinger;

            [FieldOffset(0)]
            internal global::SharpSDL.MultiGestureEvent.__Internal mgesture;

            [FieldOffset(0)]
            internal global::SharpSDL.DollarGestureEvent.__Internal dgesture;

            [FieldOffset(0)]
            internal global::SharpSDL.DropEvent.__Internal drop;

            [FieldOffset(0)]
            internal fixed byte padding[56];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_Event@@QEAA@AEBT0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        private Event.__Internal __instance;
        internal Event.__Internal __Instance { get { return __instance; } }

        internal static global::SharpSDL.Event __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.Event(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.Event __CreateInstance(global::SharpSDL.Event.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.Event(native, skipVTables);
        }

        private Event(global::SharpSDL.Event.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private Event(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::SharpSDL.Event.__Internal*) native;
        }

        public Event(global::SharpSDL.Event _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public uint Type
        {
            get
            {
                return __instance.type;
            }

            set
            {
                __instance.type = value;
            }
        }

        public global::SharpSDL.CommonEvent Common
        {
            get
            {
                return global::SharpSDL.CommonEvent.__CreateInstance(__instance.common);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.common = *(global::SharpSDL.CommonEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.DisplayEvent Display
        {
            get
            {
                return global::SharpSDL.DisplayEvent.__CreateInstance(__instance.display);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.display = *(global::SharpSDL.DisplayEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.WindowEvent Window
        {
            get
            {
                return global::SharpSDL.WindowEvent.__CreateInstance(__instance.window);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.window = *(global::SharpSDL.WindowEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.KeyboardEvent Key
        {
            get
            {
                return global::SharpSDL.KeyboardEvent.__CreateInstance(__instance.key);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.key = *(global::SharpSDL.KeyboardEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.TextEditingEvent Edit
        {
            get
            {
                return global::SharpSDL.TextEditingEvent.__CreateInstance(__instance.edit);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.edit = *(global::SharpSDL.TextEditingEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.TextInputEvent Text
        {
            get
            {
                return global::SharpSDL.TextInputEvent.__CreateInstance(__instance.text);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.text = *(global::SharpSDL.TextInputEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.MouseMotionEvent Motion
        {
            get
            {
                return global::SharpSDL.MouseMotionEvent.__CreateInstance(__instance.motion);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.motion = *(global::SharpSDL.MouseMotionEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.MouseButtonEvent Button
        {
            get
            {
                return global::SharpSDL.MouseButtonEvent.__CreateInstance(__instance.button);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.button = *(global::SharpSDL.MouseButtonEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.MouseWheelEvent Wheel
        {
            get
            {
                return global::SharpSDL.MouseWheelEvent.__CreateInstance(__instance.wheel);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.wheel = *(global::SharpSDL.MouseWheelEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.JoyAxisEvent Jaxis
        {
            get
            {
                return global::SharpSDL.JoyAxisEvent.__CreateInstance(__instance.jaxis);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.jaxis = *(global::SharpSDL.JoyAxisEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.JoyBallEvent Jball
        {
            get
            {
                return global::SharpSDL.JoyBallEvent.__CreateInstance(__instance.jball);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.jball = *(global::SharpSDL.JoyBallEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.JoyHatEvent Jhat
        {
            get
            {
                return global::SharpSDL.JoyHatEvent.__CreateInstance(__instance.jhat);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.jhat = *(global::SharpSDL.JoyHatEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.JoyButtonEvent Jbutton
        {
            get
            {
                return global::SharpSDL.JoyButtonEvent.__CreateInstance(__instance.jbutton);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.jbutton = *(global::SharpSDL.JoyButtonEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.JoyDeviceEvent Jdevice
        {
            get
            {
                return global::SharpSDL.JoyDeviceEvent.__CreateInstance(__instance.jdevice);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.jdevice = *(global::SharpSDL.JoyDeviceEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.ControllerAxisEvent Caxis
        {
            get
            {
                return global::SharpSDL.ControllerAxisEvent.__CreateInstance(__instance.caxis);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.caxis = *(global::SharpSDL.ControllerAxisEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.ControllerButtonEvent Cbutton
        {
            get
            {
                return global::SharpSDL.ControllerButtonEvent.__CreateInstance(__instance.cbutton);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.cbutton = *(global::SharpSDL.ControllerButtonEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.ControllerDeviceEvent Cdevice
        {
            get
            {
                return global::SharpSDL.ControllerDeviceEvent.__CreateInstance(__instance.cdevice);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.cdevice = *(global::SharpSDL.ControllerDeviceEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.AudioDeviceEvent Adevice
        {
            get
            {
                return global::SharpSDL.AudioDeviceEvent.__CreateInstance(__instance.adevice);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.adevice = *(global::SharpSDL.AudioDeviceEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.SensorEvent Sensor
        {
            get
            {
                return global::SharpSDL.SensorEvent.__CreateInstance(__instance.sensor);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.sensor = *(global::SharpSDL.SensorEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.QuitEvent Quit
        {
            get
            {
                return global::SharpSDL.QuitEvent.__CreateInstance(__instance.quit);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.quit = *(global::SharpSDL.QuitEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.UserEvent User
        {
            get
            {
                return global::SharpSDL.UserEvent.__CreateInstance(__instance.user);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.user = *(global::SharpSDL.UserEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.SysWMEvent Syswm
        {
            get
            {
                return global::SharpSDL.SysWMEvent.__CreateInstance(__instance.syswm);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.syswm = *(global::SharpSDL.SysWMEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.TouchFingerEvent Tfinger
        {
            get
            {
                return global::SharpSDL.TouchFingerEvent.__CreateInstance(__instance.tfinger);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.tfinger = *(global::SharpSDL.TouchFingerEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.MultiGestureEvent Mgesture
        {
            get
            {
                return global::SharpSDL.MultiGestureEvent.__CreateInstance(__instance.mgesture);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.mgesture = *(global::SharpSDL.MultiGestureEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.DollarGestureEvent Dgesture
        {
            get
            {
                return global::SharpSDL.DollarGestureEvent.__CreateInstance(__instance.dgesture);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.dgesture = *(global::SharpSDL.DollarGestureEvent.__Internal*) value.__Instance;
            }
        }

        public global::SharpSDL.DropEvent Drop
        {
            get
            {
                return global::SharpSDL.DropEvent.__CreateInstance(__instance.drop);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.drop = *(global::SharpSDL.DropEvent.__Internal*) value.__Instance;
            }
        }

        public byte[] Padding
        {
            get
            {
                fixed (byte* __arrPtr = __instance.padding)
                {
                    byte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new byte[56];
                        for (int i = 0; i < 56; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (byte* __arrPtr = __instance.padding)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 56; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial class SDL_events
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_PumpEvents")]
            internal static extern void PumpEvents();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_PeepEvents")]
            internal static extern int PeepEvents(global::System.IntPtr events, int numevents, global::SharpSDL.Eventaction action, uint minType, uint maxType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_FlushEvent")]
            internal static extern void FlushEvent(uint type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_FlushEvents")]
            internal static extern void FlushEvents(uint minType, uint maxType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_PollEvent")]
            internal static extern int PollEvent(global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_WaitEvent")]
            internal static extern int WaitEvent(global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_WaitEventTimeout")]
            internal static extern int WaitEventTimeout(global::System.IntPtr @event, int timeout);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_PushEvent")]
            internal static extern int PushEvent(global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_SetEventFilter")]
            internal static extern void SetEventFilter(global::System.IntPtr filter, global::System.IntPtr userdata);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_AddEventWatch")]
            internal static extern void AddEventWatch(global::System.IntPtr filter, global::System.IntPtr userdata);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_DelEventWatch")]
            internal static extern void DelEventWatch(global::System.IntPtr filter, global::System.IntPtr userdata);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_FilterEvents")]
            internal static extern void FilterEvents(global::System.IntPtr filter, global::System.IntPtr userdata);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_EventState")]
            internal static extern byte EventState(uint type, int state);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_RegisterEvents")]
            internal static extern uint RegisterEvents(int numevents);
        }

        /// <summary>Pumps the event loop, gathering events from the input devices.</summary>
/// <remarks>
/// <para>This function updates the event queue and internal input device state.</para>
/// <para>This should only be run in the thread that sets the video mode.</para>
/// </remarks>
        public static void PumpEvents()
        {
            __Internal.PumpEvents();
        }

        /// <summary>Checks the event queue for messages and optionally returns them.</summary>
/// <returns>
/// <para>The number of events actually stored, or -1 if there was an error.</para>
/// <para>This function is thread-safe.</para>
/// </returns>
/// <remarks>
/// <para>Ifis ::SDL_ADDEVENT, up toevents will be added to</para>
/// <para>the back of the event queue.</para>
/// <para>Ifis ::SDL_PEEKEVENT, up toevents at the front</para>
/// <para>of the event queue, within the specified minimum and maximum type,</para>
/// <para>will be returned and will not be removed from the queue.</para>
/// <para>Ifis ::SDL_GETEVENT, up toevents at the front</para>
/// <para>of the event queue, within the specified minimum and maximum type,</para>
/// <para>will be returned and will be removed from the queue.</para>
/// </remarks>
        public static int PeepEvents(global::SharpSDL.Event events, int numevents, global::SharpSDL.Eventaction action, uint minType, uint maxType)
        {
            var ____arg0 = events.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = __Internal.PeepEvents(__arg0, numevents, action, minType, maxType);
            return __ret;
        }

        /// <summary>
/// <para>This function clears events from the event queue</para>
/// <para>This function only affects currently queued events. If you want to make</para>
/// <para>sure that all pending OS events are flushed, you can call SDL_PumpEvents()</para>
/// <para>on the main thread immediately before the flush call.</para>
/// </summary>
        public static void FlushEvent(uint type)
        {
            __Internal.FlushEvent(type);
        }

        public static void FlushEvents(uint minType, uint maxType)
        {
            __Internal.FlushEvents(minType, maxType);
        }

        /// <summary>Polls for currently pending events.</summary>
/// <param name="event">
/// <para>If not NULL, the next event is removed from the queue and</para>
/// <para>stored in that area.</para>
/// </param>
/// <returns>1 if there are any pending events, or 0 if there are none available.</returns>
        public static int PollEvent(global::SharpSDL.Event @event)
        {
            var ____arg0 = @event.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = __Internal.PollEvent(__arg0);
            return __ret;
        }

        /// <summary>Waits indefinitely for the next available event.</summary>
/// <param name="event">
/// <para>If not NULL, the next event is removed from the queue and</para>
/// <para>stored in that area.</para>
/// </param>
/// <returns>1, or 0 if there was an error while waiting for events.</returns>
        public static int WaitEvent(global::SharpSDL.Event @event)
        {
            var ____arg0 = @event.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = __Internal.WaitEvent(__arg0);
            return __ret;
        }

        /// <summary>
/// <para>Waits until the specified timeout (in milliseconds) for the next</para>
/// <para>available event.</para>
/// </summary>
/// <param name="event">
/// <para>If not NULL, the next event is removed from the queue and</para>
/// <para>stored in that area.</para>
/// </param>
/// <param name="timeout">The timeout (in milliseconds) to wait for next event.</param>
/// <returns>1, or 0 if there was an error while waiting for events.</returns>
        public static int WaitEventTimeout(global::SharpSDL.Event @event, int timeout)
        {
            var ____arg0 = @event.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = __Internal.WaitEventTimeout(__arg0, timeout);
            return __ret;
        }

        /// <summary>Add an event to the event queue.</summary>
/// <returns>
/// <para>1 on success, 0 if the event was filtered, or -1 if the event queue</para>
/// <para>was full or there was some other error.</para>
/// </returns>
        public static int PushEvent(global::SharpSDL.Event @event)
        {
            var ____arg0 = @event.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = __Internal.PushEvent(__arg0);
            return __ret;
        }

        /// <summary>
/// <para>Sets up a filter to process all events before they change internal state and</para>
/// <para>are posted to the internal event queue.</para>
/// </summary>
/// <remarks>
/// <para>The filter is prototyped as:</para>
/// <para>If the filter returns 1, then the event will be added to the internal queue.</para>
/// <para>If it returns 0, then the event will be dropped from the queue, but the</para>
/// <para>internal state will still be updated.  This allows selective filtering of</para>
/// <para>dynamically arriving events.</para>
/// <para>Be very careful of what you do in the event filter function, as</para>
/// <para>it may run in a different thread!</para>
/// <para>There is one caveat when dealing with the ::SDL_QuitEvent event type.  The</para>
/// <para>event filter is only called when the window manager desires to close the</para>
/// <para>application window.  If the event filter returns 1, then the window will</para>
/// <para>be closed, otherwise the window will remain open if possible.</para>
/// <para>If the quit event is generated by an interrupt signal, it will bypass the</para>
/// <para>internal queue and be delivered to the application at the next event poll.</para>
/// </remarks>
        public static void SetEventFilter(global::SharpSDL.EventFilter filter, global::System.IntPtr userdata)
        {
            var __arg0 = filter == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(filter);
            __Internal.SetEventFilter(__arg0, userdata);
        }

        /// <summary>Add a function which is called when an event is added to the queue.</summary>
        public static void AddEventWatch(global::SharpSDL.EventFilter filter, global::System.IntPtr userdata)
        {
            var __arg0 = filter == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(filter);
            __Internal.AddEventWatch(__arg0, userdata);
        }

        /// <summary>Remove an event watch function added with SDL_AddEventWatch()</summary>
        public static void DelEventWatch(global::SharpSDL.EventFilter filter, global::System.IntPtr userdata)
        {
            var __arg0 = filter == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(filter);
            __Internal.DelEventWatch(__arg0, userdata);
        }

        /// <summary>
/// <para>Run the filter function on the current event queue, removing any</para>
/// <para>events for which the filter returns 0.</para>
/// </summary>
        public static void FilterEvents(global::SharpSDL.EventFilter filter, global::System.IntPtr userdata)
        {
            var __arg0 = filter == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(filter);
            __Internal.FilterEvents(__arg0, userdata);
        }

        /// <summary>
/// <para>This function allows you to set the state of processing certain events.</para>
/// <para>- Ifis set to ::SDL_IGNORE, that event will be automatically</para>
/// <para>dropped from the event queue and will not be filtered.</para>
/// <para>- Ifis set to ::SDL_ENABLE, that event will be processed</para>
/// <para>normally.</para>
/// <para>- Ifis set to ::SDL_QUERY, SDL_EventState() will return the</para>
/// <para>current processing state of the specified event.</para>
/// </summary>
        public static byte EventState(uint type, int state)
        {
            var __ret = __Internal.EventState(type, state);
            return __ret;
        }

        /// <summary>
/// <para>This function allocates a set of user-defined events, and returns</para>
/// <para>the beginning event number for that set of events.</para>
/// </summary>
/// <remarks>
/// <para>If there aren't enough user-defined events left, this function</para>
/// <para>returns (Uint32)-1</para>
/// </remarks>
        public static uint RegisterEvents(int numevents)
        {
            var __ret = __Internal.RegisterEvents(numevents);
            return __ret;
        }
    }
}
