// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SharpSDL
{
    public enum JoystickType
    {
        JOYSTICK_TYPE_UNKNOWN = 0,
        JOYSTICK_TYPE_GAMECONTROLLER = 1,
        JOYSTICK_TYPE_WHEEL = 2,
        JOYSTICK_TYPE_ARCADE_STICK = 3,
        JOYSTICK_TYPE_FLIGHT_STICK = 4,
        JOYSTICK_TYPE_DANCE_PAD = 5,
        JOYSTICK_TYPE_GUITAR = 6,
        JOYSTICK_TYPE_DRUM_KIT = 7,
        JOYSTICK_TYPE_ARCADE_PAD = 8,
        JOYSTICK_TYPE_THROTTLE = 9
    }

    public enum JoystickPowerLevel
    {
        JOYSTICK_POWER_UNKNOWN = -1,
        JOYSTICK_POWER_EMPTY = 0,
        JOYSTICK_POWER_LOW = 1,
        JOYSTICK_POWER_MEDIUM = 2,
        JOYSTICK_POWER_FULL = 3,
        JOYSTICK_POWER_WIRED = 4,
        JOYSTICK_POWER_MAX = 5
    }

    public enum HatState
    {
        SDL_HAT_CENTERED = 0,
        SDL_HAT_UP = 1,
        SDL_HAT_RIGHT = 2,
        SDL_HAT_DOWN = 4,
        SDL_HAT_LEFT = 8,
        SDL_HAT_RIGHTUP = 3,
        SDL_HAT_RIGHTDOWN = 6,
        SDL_HAT_LEFTUP = 9,
        SDL_HAT_LEFTDOWN = 12
    }

    /// <summary>
/// <para>This is a unique ID for a joystick for the time it is connected to the system,</para>
/// <para>and is never reused for the lifetime of the application. If the joystick is</para>
/// <para>disconnected and reconnected, it will get a new ID.</para>
/// </summary>
/// <remarks>The ID value starts at 0 and increments from there. The value -1 is an invalid ID.</remarks>
    /// <summary>The joystick structure used to identify an SDL joystick</summary>
    public unsafe partial class SDL_Joystick
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.SDL_Joystick> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.SDL_Joystick>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.SDL_Joystick __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.SDL_Joystick(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.SDL_Joystick __CreateInstance(global::SharpSDL.SDL_Joystick.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.SDL_Joystick(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.SDL_Joystick.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.SDL_Joystick.__Internal));
            *(global::SharpSDL.SDL_Joystick.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SDL_Joystick(global::SharpSDL.SDL_Joystick.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SDL_Joystick(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class JoystickGUID : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte data[16];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_JoystickGUID@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.JoystickGUID> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.JoystickGUID>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.JoystickGUID __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.JoystickGUID(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.JoystickGUID __CreateInstance(global::SharpSDL.JoystickGUID.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.JoystickGUID(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.JoystickGUID.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.JoystickGUID.__Internal));
            *(global::SharpSDL.JoystickGUID.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JoystickGUID(global::SharpSDL.JoystickGUID.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected JoystickGUID(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public JoystickGUID()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.JoystickGUID.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public JoystickGUID(global::SharpSDL.JoystickGUID _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.JoystickGUID.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.JoystickGUID.__Internal*) __Instance) = *((global::SharpSDL.JoystickGUID.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.JoystickGUID __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Data
        {
            get
            {
                byte[] __value = null;
                if (((global::SharpSDL.JoystickGUID.__Internal*) __Instance)->data != null)
                {
                    __value = new byte[16];
                    for (int i = 0; i < 16; i++)
                        __value[i] = ((global::SharpSDL.JoystickGUID.__Internal*) __Instance)->data[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 16; i++)
                        ((global::SharpSDL.JoystickGUID.__Internal*)__Instance)->data[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class SDLJoystick
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_LockJoysticks")]
            internal static extern void LockJoysticks();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_UnlockJoysticks")]
            internal static extern void UnlockJoysticks();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_NumJoysticks")]
            internal static extern int NumJoysticks();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickNameForIndex")]
            internal static extern global::System.IntPtr JoystickNameForIndex(int device_index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetDevicePlayerIndex")]
            internal static extern int JoystickGetDevicePlayerIndex(int device_index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetDeviceGUID")]
            internal static extern void JoystickGetDeviceGUID(global::System.IntPtr @return, int device_index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetDeviceVendor")]
            internal static extern ushort JoystickGetDeviceVendor(int device_index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetDeviceProduct")]
            internal static extern ushort JoystickGetDeviceProduct(int device_index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetDeviceProductVersion")]
            internal static extern ushort JoystickGetDeviceProductVersion(int device_index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetDeviceType")]
            internal static extern global::SharpSDL.JoystickType JoystickGetDeviceType(int device_index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetDeviceInstanceID")]
            internal static extern int JoystickGetDeviceInstanceID(int device_index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickOpen")]
            internal static extern global::System.IntPtr JoystickOpen(int device_index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickFromInstanceID")]
            internal static extern global::System.IntPtr JoystickFromInstanceID(int joyid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickName")]
            internal static extern global::System.IntPtr JoystickName(global::System.IntPtr joystick);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetPlayerIndex")]
            internal static extern int JoystickGetPlayerIndex(global::System.IntPtr joystick);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetGUID")]
            internal static extern global::SharpSDL.JoystickGUID.__Internal JoystickGetGUID(global::System.IntPtr joystick);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetVendor")]
            internal static extern ushort JoystickGetVendor(global::System.IntPtr joystick);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetProduct")]
            internal static extern ushort JoystickGetProduct(global::System.IntPtr joystick);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetProductVersion")]
            internal static extern ushort JoystickGetProductVersion(global::System.IntPtr joystick);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetType")]
            internal static extern global::SharpSDL.JoystickType JoystickGetType(global::System.IntPtr joystick);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetGUIDString")]
            internal static extern void JoystickGetGUIDString(global::System.IntPtr guid, sbyte* pszGUID, int cbGUID);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetGUIDFromString")]
            internal static extern void JoystickGetGUIDFromString(global::System.IntPtr @return, [MarshalAs(UnmanagedType.LPStr)] string pchGUID);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickInstanceID")]
            internal static extern int JoystickInstanceID(global::System.IntPtr joystick);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickNumAxes")]
            internal static extern int JoystickNumAxes(global::System.IntPtr joystick);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickNumBalls")]
            internal static extern int JoystickNumBalls(global::System.IntPtr joystick);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickNumHats")]
            internal static extern int JoystickNumHats(global::System.IntPtr joystick);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickNumButtons")]
            internal static extern int JoystickNumButtons(global::System.IntPtr joystick);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickUpdate")]
            internal static extern void JoystickUpdate();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickEventState")]
            internal static extern int JoystickEventState(int state);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetAxis")]
            internal static extern short JoystickGetAxis(global::System.IntPtr joystick, int axis);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetHat")]
            internal static extern byte JoystickGetHat(global::System.IntPtr joystick, int hat);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetBall")]
            internal static extern int JoystickGetBall(global::System.IntPtr joystick, int ball, int* dx, int* dy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickGetButton")]
            internal static extern byte JoystickGetButton(global::System.IntPtr joystick, int button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickRumble")]
            internal static extern int JoystickRumble(global::System.IntPtr joystick, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickClose")]
            internal static extern void JoystickClose(global::System.IntPtr joystick);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_JoystickCurrentPowerLevel")]
            internal static extern global::SharpSDL.JoystickPowerLevel JoystickCurrentPowerLevel(global::System.IntPtr joystick);
        }

        /// <summary>Locking for multi-threaded access to the joystick API</summary>
/// <remarks>
/// <para>If you are using the joystick API or handling events from multiple threads</para>
/// <para>you should use these locking functions to protect access to the joysticks.</para>
/// <para>In particular, you are guaranteed that the joystick list won't change, so</para>
/// <para>the API functions that take a joystick index will be valid, and joystick</para>
/// <para>and game controller events will not be delivered.</para>
/// </remarks>
        public static void LockJoysticks()
        {
            __Internal.LockJoysticks();
        }

        public static void UnlockJoysticks()
        {
            __Internal.UnlockJoysticks();
        }

        /// <summary>Count the number of joysticks attached to the system right now</summary>
        public static int NumJoysticks()
        {
            var __ret = __Internal.NumJoysticks();
            return __ret;
        }

        /// <summary>
/// <para>Get the implementation dependent name of a joystick.</para>
/// <para>This can be called before any joysticks are opened.</para>
/// <para>If no name can be found, this function returns NULL.</para>
/// </summary>
        public static string JoystickNameForIndex(int device_index)
        {
            var __ret = __Internal.JoystickNameForIndex(device_index);
            return Marshal.PtrToStringAnsi(__ret);
        }

        /// <summary>
/// <para>Get the player index of a joystick, or -1 if it's not available</para>
/// <para>This can be called before any joysticks are opened.</para>
/// </summary>
        public static int JoystickGetDevicePlayerIndex(int device_index)
        {
            var __ret = __Internal.JoystickGetDevicePlayerIndex(device_index);
            return __ret;
        }

        /// <summary>
/// <para>Return the GUID for the joystick at this index</para>
/// <para>This can be called before any joysticks are opened.</para>
/// </summary>
        public static global::SharpSDL.JoystickGUID JoystickGetDeviceGUID(int device_index)
        {
            var __ret = new global::SharpSDL.JoystickGUID.__Internal();
            __Internal.JoystickGetDeviceGUID(new IntPtr(&__ret), device_index);
            return global::SharpSDL.JoystickGUID.__CreateInstance(__ret);
        }

        /// <summary>
/// <para>Get the USB vendor ID of a joystick, if available.</para>
/// <para>This can be called before any joysticks are opened.</para>
/// <para>If the vendor ID isn't available this function returns 0.</para>
/// </summary>
        public static ushort JoystickGetDeviceVendor(int device_index)
        {
            var __ret = __Internal.JoystickGetDeviceVendor(device_index);
            return __ret;
        }

        /// <summary>
/// <para>Get the USB product ID of a joystick, if available.</para>
/// <para>This can be called before any joysticks are opened.</para>
/// <para>If the product ID isn't available this function returns 0.</para>
/// </summary>
        public static ushort JoystickGetDeviceProduct(int device_index)
        {
            var __ret = __Internal.JoystickGetDeviceProduct(device_index);
            return __ret;
        }

        /// <summary>
/// <para>Get the product version of a joystick, if available.</para>
/// <para>This can be called before any joysticks are opened.</para>
/// <para>If the product version isn't available this function returns 0.</para>
/// </summary>
        public static ushort JoystickGetDeviceProductVersion(int device_index)
        {
            var __ret = __Internal.JoystickGetDeviceProductVersion(device_index);
            return __ret;
        }

        /// <summary>
/// <para>Get the type of a joystick, if available.</para>
/// <para>This can be called before any joysticks are opened.</para>
/// </summary>
        public static global::SharpSDL.JoystickType JoystickGetDeviceType(int device_index)
        {
            var __ret = __Internal.JoystickGetDeviceType(device_index);
            return __ret;
        }

        /// <summary>
/// <para>Get the instance ID of a joystick.</para>
/// <para>This can be called before any joysticks are opened.</para>
/// <para>If the index is out of range, this function will return -1.</para>
/// </summary>
        public static int JoystickGetDeviceInstanceID(int device_index)
        {
            var __ret = __Internal.JoystickGetDeviceInstanceID(device_index);
            return __ret;
        }

        /// <summary>
/// <para>Open a joystick for use.</para>
/// <para>The index passed as an argument refers to the N'th joystick on the system.</para>
/// <para>This index is not the value which will identify this joystick in future</para>
/// <para>joystick events.  The joystick's instance id (::SDL_JoystickID) will be used</para>
/// <para>there instead.</para>
/// </summary>
/// <returns>A joystick identifier, or NULL if an error occurred.</returns>
        public static global::SharpSDL.SDL_Joystick JoystickOpen(int device_index)
        {
            var __ret = __Internal.JoystickOpen(device_index);
            global::SharpSDL.SDL_Joystick __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::SharpSDL.SDL_Joystick.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::SharpSDL.SDL_Joystick) global::SharpSDL.SDL_Joystick.NativeToManagedMap[__ret];
            else __result0 = global::SharpSDL.SDL_Joystick.__CreateInstance(__ret);
            return __result0;
        }

        /// <summary>Return the SDL_Joystick associated with an instance id.</summary>
        public static global::SharpSDL.SDL_Joystick JoystickFromInstanceID(int joyid)
        {
            var __ret = __Internal.JoystickFromInstanceID(joyid);
            global::SharpSDL.SDL_Joystick __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::SharpSDL.SDL_Joystick.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::SharpSDL.SDL_Joystick) global::SharpSDL.SDL_Joystick.NativeToManagedMap[__ret];
            else __result0 = global::SharpSDL.SDL_Joystick.__CreateInstance(__ret);
            return __result0;
        }

        /// <summary>
/// <para>Return the name for this currently opened joystick.</para>
/// <para>If no name can be found, this function returns NULL.</para>
/// </summary>
        public static string JoystickName(global::SharpSDL.SDL_Joystick joystick)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            var __ret = __Internal.JoystickName(__arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        /// <summary>Get the player index of an opened joystick, or -1 if it's not available</summary>
/// <remarks>For XInput controllers this returns the XInput user index.</remarks>
        public static int JoystickGetPlayerIndex(global::SharpSDL.SDL_Joystick joystick)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            var __ret = __Internal.JoystickGetPlayerIndex(__arg0);
            return __ret;
        }

        /// <summary>Return the GUID for this opened joystick</summary>
        public static global::SharpSDL.JoystickGUID JoystickGetGUID(global::SharpSDL.SDL_Joystick joystick)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            var __ret = __Internal.JoystickGetGUID(__arg0);
            return global::SharpSDL.JoystickGUID.__CreateInstance(__ret);
        }

        /// <summary>
/// <para>Get the USB vendor ID of an opened joystick, if available.</para>
/// <para>If the vendor ID isn't available this function returns 0.</para>
/// </summary>
        public static ushort JoystickGetVendor(global::SharpSDL.SDL_Joystick joystick)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            var __ret = __Internal.JoystickGetVendor(__arg0);
            return __ret;
        }

        /// <summary>
/// <para>Get the USB product ID of an opened joystick, if available.</para>
/// <para>If the product ID isn't available this function returns 0.</para>
/// </summary>
        public static ushort JoystickGetProduct(global::SharpSDL.SDL_Joystick joystick)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            var __ret = __Internal.JoystickGetProduct(__arg0);
            return __ret;
        }

        /// <summary>
/// <para>Get the product version of an opened joystick, if available.</para>
/// <para>If the product version isn't available this function returns 0.</para>
/// </summary>
        public static ushort JoystickGetProductVersion(global::SharpSDL.SDL_Joystick joystick)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            var __ret = __Internal.JoystickGetProductVersion(__arg0);
            return __ret;
        }

        /// <summary>Get the type of an opened joystick.</summary>
        public static global::SharpSDL.JoystickType JoystickGetType(global::SharpSDL.SDL_Joystick joystick)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            var __ret = __Internal.JoystickGetType(__arg0);
            return __ret;
        }

        /// <summary>
/// <para>Return a string representation for this guid. pszGUID must point to at least 33 bytes</para>
/// <para>(32 for the string plus a NULL terminator).</para>
/// </summary>
        public static void JoystickGetGUIDString(global::SharpSDL.JoystickGUID guid, sbyte* pszGUID, int cbGUID)
        {
            if (ReferenceEquals(guid, null))
                throw new global::System.ArgumentNullException("guid", "Cannot be null because it is passed by value.");
            var __arg0 = guid.__Instance;
            __Internal.JoystickGetGUIDString(__arg0, pszGUID, cbGUID);
        }

        /// <summary>Convert a string into a joystick guid</summary>
        public static global::SharpSDL.JoystickGUID JoystickGetGUIDFromString(string pchGUID)
        {
            var __ret = new global::SharpSDL.JoystickGUID.__Internal();
            __Internal.JoystickGetGUIDFromString(new IntPtr(&__ret), pchGUID);
            return global::SharpSDL.JoystickGUID.__CreateInstance(__ret);
        }

        /// <summary>Get the instance ID of an opened joystick or -1 if the joystick is invalid.</summary>
        public static int JoystickInstanceID(global::SharpSDL.SDL_Joystick joystick)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            var __ret = __Internal.JoystickInstanceID(__arg0);
            return __ret;
        }

        /// <summary>Get the number of general axis controls on a joystick.</summary>
        public static int JoystickNumAxes(global::SharpSDL.SDL_Joystick joystick)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            var __ret = __Internal.JoystickNumAxes(__arg0);
            return __ret;
        }

        /// <summary>Get the number of trackballs on a joystick.</summary>
/// <remarks>
/// <para>Joystick trackballs have only relative motion events associated</para>
/// <para>with them and their state cannot be polled.</para>
/// </remarks>
        public static int JoystickNumBalls(global::SharpSDL.SDL_Joystick joystick)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            var __ret = __Internal.JoystickNumBalls(__arg0);
            return __ret;
        }

        /// <summary>Get the number of POV hats on a joystick.</summary>
        public static int JoystickNumHats(global::SharpSDL.SDL_Joystick joystick)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            var __ret = __Internal.JoystickNumHats(__arg0);
            return __ret;
        }

        /// <summary>Get the number of buttons on a joystick.</summary>
        public static int JoystickNumButtons(global::SharpSDL.SDL_Joystick joystick)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            var __ret = __Internal.JoystickNumButtons(__arg0);
            return __ret;
        }

        /// <summary>Update the current state of the open joysticks.</summary>
/// <remarks>
/// <para>This is called automatically by the event loop if any joystick</para>
/// <para>events are enabled.</para>
/// </remarks>
        public static void JoystickUpdate()
        {
            __Internal.JoystickUpdate();
        }

        /// <summary>Enable/disable joystick event polling.</summary>
/// <remarks>
/// <para>If joystick events are disabled, you must call SDL_JoystickUpdate()</para>
/// <para>yourself and check the state of the joystick when you want joystick</para>
/// <para>information.</para>
/// <para>The state can be one of ::SDL_QUERY, ::SDL_ENABLE or ::SDL_IGNORE.</para>
/// </remarks>
        public static int JoystickEventState(int state)
        {
            var __ret = __Internal.JoystickEventState(state);
            return __ret;
        }

        /// <summary>Get the current state of an axis control on a joystick.</summary>
/// <remarks>
/// <para>The state is a value ranging from -32768 to 32767.</para>
/// <para>The axis indices start at index 0.</para>
/// </remarks>
        public static short JoystickGetAxis(global::SharpSDL.SDL_Joystick joystick, int axis)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            var __ret = __Internal.JoystickGetAxis(__arg0, axis);
            return __ret;
        }

        /// <summary>Get the current state of a POV hat on a joystick.</summary>
/// <returns>
/// <para>The return value is one of the following positions:</para>
/// <para>- ::SDL_HAT_CENTERED</para>
/// <para>- ::SDL_HAT_UP</para>
/// <para>- ::SDL_HAT_RIGHT</para>
/// <para>- ::SDL_HAT_DOWN</para>
/// <para>- ::SDL_HAT_LEFT</para>
/// <para>- ::SDL_HAT_RIGHTUP</para>
/// <para>- ::SDL_HAT_RIGHTDOWN</para>
/// <para>- ::SDL_HAT_LEFTUP</para>
/// <para>- ::SDL_HAT_LEFTDOWN</para>
/// </returns>
/// <remarks>The hat indices start at index 0.</remarks>
        public static byte JoystickGetHat(global::SharpSDL.SDL_Joystick joystick, int hat)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            var __ret = __Internal.JoystickGetHat(__arg0, hat);
            return __ret;
        }

        /// <summary>Get the ball axis change since the last poll.</summary>
/// <returns>
/// <para>0, or -1 if you passed it invalid parameters.</para>
/// <para>The ball indices start at index 0.</para>
/// </returns>
        public static int JoystickGetBall(global::SharpSDL.SDL_Joystick joystick, int ball, ref int dx, ref int dy)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            fixed (int* __dx2 = &dx)
            {
                var __arg2 = __dx2;
                fixed (int* __dy3 = &dy)
                {
                    var __arg3 = __dy3;
                    var __ret = __Internal.JoystickGetBall(__arg0, ball, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        /// <summary>Get the current state of a button on a joystick.</summary>
/// <remarks>The button indices start at index 0.</remarks>
        public static byte JoystickGetButton(global::SharpSDL.SDL_Joystick joystick, int button)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            var __ret = __Internal.JoystickGetButton(__arg0, button);
            return __ret;
        }

        /// <summary>
/// <para>Trigger a rumble effect</para>
/// <para>Each call to this function cancels any previous rumble effect, and calling it with 0 intensity stops any rumbling.</para>
/// </summary>
/// <param name="joystick">The joystick to vibrate</param>
/// <param name="low_frequency_rumble">The intensity of the low frequency (left) rumble motor, from 0 to 0xFFFF</param>
/// <param name="high_frequency_rumble">The intensity of the high frequency (right) rumble motor, from 0 to 0xFFFF</param>
/// <param name="duration_ms">The duration of the rumble effect, in milliseconds</param>
/// <returns>0, or -1 if rumble isn't supported on this joystick</returns>
        public static int JoystickRumble(global::SharpSDL.SDL_Joystick joystick, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            var __ret = __Internal.JoystickRumble(__arg0, low_frequency_rumble, high_frequency_rumble, duration_ms);
            return __ret;
        }

        /// <summary>Close a joystick previously opened with SDL_JoystickOpen().</summary>
        public static void JoystickClose(global::SharpSDL.SDL_Joystick joystick)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            __Internal.JoystickClose(__arg0);
        }

        /// <summary>Return the battery level of this joystick</summary>
        public static global::SharpSDL.JoystickPowerLevel JoystickCurrentPowerLevel(global::SharpSDL.SDL_Joystick joystick)
        {
            var __arg0 = ReferenceEquals(joystick, null) ? global::System.IntPtr.Zero : joystick.__Instance;
            var __ret = __Internal.JoystickCurrentPowerLevel(__arg0);
            return __ret;
        }
    }
}
