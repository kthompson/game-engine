// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SharpSDL
{
    /// <summary>SDL_MessageBox flags. If supported will display warning icon, etc.</summary>
    [Flags]
    public enum MessageBoxFlags
    {
        /// <summary>error dialog</summary>
        MESSAGEBOX_ERROR = 16,
        /// <summary>warning dialog</summary>
        MESSAGEBOX_WARNING = 32,
        /// <summary>informational dialog</summary>
        MESSAGEBOX_INFORMATION = 64
    }

    /// <summary>Flags for SDL_MessageBoxButtonData.</summary>
    public enum MessageBoxButtonFlags
    {
        /// <summary>Marks the default button when return is hit</summary>
        MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 1,
        /// <summary>Marks the default button when escape is hit</summary>
        MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 2
    }

    public enum MessageBoxColorType
    {
        MESSAGEBOX_COLOR_BACKGROUND = 0,
        MESSAGEBOX_COLOR_TEXT = 1,
        MESSAGEBOX_COLOR_BUTTON_BORDER = 2,
        MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3,
        MESSAGEBOX_COLOR_BUTTON_SELECTED = 4,
        MESSAGEBOX_COLOR_MAX = 5
    }

    /// <summary>Individual button data.</summary>
    public unsafe partial class MessageBoxButtonData : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint flags;

            [FieldOffset(4)]
            internal int buttonid;

            [FieldOffset(8)]
            internal global::System.IntPtr text;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_MessageBoxButtonData@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.MessageBoxButtonData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.MessageBoxButtonData>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.MessageBoxButtonData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.MessageBoxButtonData(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.MessageBoxButtonData __CreateInstance(global::SharpSDL.MessageBoxButtonData.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.MessageBoxButtonData(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.MessageBoxButtonData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MessageBoxButtonData.__Internal));
            *(global::SharpSDL.MessageBoxButtonData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MessageBoxButtonData(global::SharpSDL.MessageBoxButtonData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MessageBoxButtonData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MessageBoxButtonData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MessageBoxButtonData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MessageBoxButtonData(global::SharpSDL.MessageBoxButtonData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MessageBoxButtonData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.MessageBoxButtonData.__Internal*) __Instance) = *((global::SharpSDL.MessageBoxButtonData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.MessageBoxButtonData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Flags
        {
            get
            {
                return ((global::SharpSDL.MessageBoxButtonData.__Internal*) __Instance)->flags;
            }

            set
            {
                ((global::SharpSDL.MessageBoxButtonData.__Internal*)__Instance)->flags = value;
            }
        }

        public int Buttonid
        {
            get
            {
                return ((global::SharpSDL.MessageBoxButtonData.__Internal*) __Instance)->buttonid;
            }

            set
            {
                ((global::SharpSDL.MessageBoxButtonData.__Internal*)__Instance)->buttonid = value;
            }
        }

        public string Text
        {
            get
            {
                return Marshal.PtrToStringAnsi(((global::SharpSDL.MessageBoxButtonData.__Internal*) __Instance)->text);
            }

            set
            {
                ((global::SharpSDL.MessageBoxButtonData.__Internal*)__Instance)->text = (global::System.IntPtr) Marshal.StringToHGlobalAnsi(value);
            }
        }
    }

    /// <summary>RGB value used in a message box color scheme</summary>
    public unsafe partial class MessageBoxColor : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 3)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal byte r;

            [FieldOffset(1)]
            internal byte g;

            [FieldOffset(2)]
            internal byte b;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_MessageBoxColor@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.MessageBoxColor> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.MessageBoxColor>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.MessageBoxColor __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.MessageBoxColor(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.MessageBoxColor __CreateInstance(global::SharpSDL.MessageBoxColor.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.MessageBoxColor(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.MessageBoxColor.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MessageBoxColor.__Internal));
            *(global::SharpSDL.MessageBoxColor.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MessageBoxColor(global::SharpSDL.MessageBoxColor.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MessageBoxColor(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MessageBoxColor()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MessageBoxColor.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MessageBoxColor(global::SharpSDL.MessageBoxColor _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MessageBoxColor.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.MessageBoxColor.__Internal*) __Instance) = *((global::SharpSDL.MessageBoxColor.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.MessageBoxColor __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte R
        {
            get
            {
                return ((global::SharpSDL.MessageBoxColor.__Internal*) __Instance)->r;
            }

            set
            {
                ((global::SharpSDL.MessageBoxColor.__Internal*)__Instance)->r = value;
            }
        }

        public byte G
        {
            get
            {
                return ((global::SharpSDL.MessageBoxColor.__Internal*) __Instance)->g;
            }

            set
            {
                ((global::SharpSDL.MessageBoxColor.__Internal*)__Instance)->g = value;
            }
        }

        public byte B
        {
            get
            {
                return ((global::SharpSDL.MessageBoxColor.__Internal*) __Instance)->b;
            }

            set
            {
                ((global::SharpSDL.MessageBoxColor.__Internal*)__Instance)->b = value;
            }
        }
    }

    /// <summary>A set of colors to use for message box dialogs</summary>
    public unsafe partial class MessageBoxColorScheme : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 15)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte colors[15];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_MessageBoxColorScheme@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.MessageBoxColorScheme> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.MessageBoxColorScheme>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.MessageBoxColorScheme __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.MessageBoxColorScheme(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.MessageBoxColorScheme __CreateInstance(global::SharpSDL.MessageBoxColorScheme.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.MessageBoxColorScheme(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.MessageBoxColorScheme.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MessageBoxColorScheme.__Internal));
            *(global::SharpSDL.MessageBoxColorScheme.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MessageBoxColorScheme(global::SharpSDL.MessageBoxColorScheme.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MessageBoxColorScheme(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MessageBoxColorScheme()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MessageBoxColorScheme.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MessageBoxColorScheme(global::SharpSDL.MessageBoxColorScheme _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MessageBoxColorScheme.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.MessageBoxColorScheme.__Internal*) __Instance) = *((global::SharpSDL.MessageBoxColorScheme.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.MessageBoxColorScheme __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SharpSDL.MessageBoxColor[] Colors
        {
            get
            {
                global::SharpSDL.MessageBoxColor[] __value = null;
                if (((global::SharpSDL.MessageBoxColorScheme.__Internal*) __Instance)->colors != null)
                {
                    __value = new global::SharpSDL.MessageBoxColor[5];
                    for (int i = 0; i < 5; i++)
                        __value[i] = global::SharpSDL.MessageBoxColor.__CreateInstance(*((global::SharpSDL.MessageBoxColor.__Internal*)&(((global::SharpSDL.MessageBoxColorScheme.__Internal*) __Instance)->colors[i * sizeof(global::SharpSDL.MessageBoxColor.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 5)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 5; i++)
                        *(global::SharpSDL.MessageBoxColor.__Internal*) &((global::SharpSDL.MessageBoxColorScheme.__Internal*)__Instance)->colors[i * sizeof(global::SharpSDL.MessageBoxColor.__Internal)] = *(global::SharpSDL.MessageBoxColor.__Internal*)value[i].__Instance;
                }
            }
        }
    }

    /// <summary>MessageBox structure containing title, text, window, etc.</summary>
    public unsafe partial class MessageBoxData : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint flags;

            [FieldOffset(8)]
            internal global::System.IntPtr window;

            [FieldOffset(16)]
            internal global::System.IntPtr title;

            [FieldOffset(24)]
            internal global::System.IntPtr message;

            [FieldOffset(32)]
            internal int numbuttons;

            [FieldOffset(40)]
            internal global::System.IntPtr buttons;

            [FieldOffset(48)]
            internal global::System.IntPtr colorScheme;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_MessageBoxData@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.MessageBoxData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.MessageBoxData>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.MessageBoxData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.MessageBoxData(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.MessageBoxData __CreateInstance(global::SharpSDL.MessageBoxData.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.MessageBoxData(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.MessageBoxData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MessageBoxData.__Internal));
            *(global::SharpSDL.MessageBoxData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MessageBoxData(global::SharpSDL.MessageBoxData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MessageBoxData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MessageBoxData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MessageBoxData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MessageBoxData(global::SharpSDL.MessageBoxData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.MessageBoxData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.MessageBoxData.__Internal*) __Instance) = *((global::SharpSDL.MessageBoxData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.MessageBoxData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Flags
        {
            get
            {
                return ((global::SharpSDL.MessageBoxData.__Internal*) __Instance)->flags;
            }

            set
            {
                ((global::SharpSDL.MessageBoxData.__Internal*)__Instance)->flags = value;
            }
        }

        public global::SharpSDL.Window Window
        {
            get
            {
                global::SharpSDL.Window __result0;
                if (((global::SharpSDL.MessageBoxData.__Internal*) __Instance)->window == IntPtr.Zero) __result0 = null;
                else if (global::SharpSDL.Window.NativeToManagedMap.ContainsKey(((global::SharpSDL.MessageBoxData.__Internal*) __Instance)->window))
                    __result0 = (global::SharpSDL.Window) global::SharpSDL.Window.NativeToManagedMap[((global::SharpSDL.MessageBoxData.__Internal*) __Instance)->window];
                else __result0 = global::SharpSDL.Window.__CreateInstance(((global::SharpSDL.MessageBoxData.__Internal*) __Instance)->window);
                return __result0;
            }

            set
            {
                ((global::SharpSDL.MessageBoxData.__Internal*)__Instance)->window = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public string Title
        {
            get
            {
                return Marshal.PtrToStringAnsi(((global::SharpSDL.MessageBoxData.__Internal*) __Instance)->title);
            }

            set
            {
                ((global::SharpSDL.MessageBoxData.__Internal*)__Instance)->title = (global::System.IntPtr) Marshal.StringToHGlobalAnsi(value);
            }
        }

        public string Message
        {
            get
            {
                return Marshal.PtrToStringAnsi(((global::SharpSDL.MessageBoxData.__Internal*) __Instance)->message);
            }

            set
            {
                ((global::SharpSDL.MessageBoxData.__Internal*)__Instance)->message = (global::System.IntPtr) Marshal.StringToHGlobalAnsi(value);
            }
        }

        public int Numbuttons
        {
            get
            {
                return ((global::SharpSDL.MessageBoxData.__Internal*) __Instance)->numbuttons;
            }

            set
            {
                ((global::SharpSDL.MessageBoxData.__Internal*)__Instance)->numbuttons = value;
            }
        }

        public global::SharpSDL.MessageBoxButtonData Buttons
        {
            get
            {
                global::SharpSDL.MessageBoxButtonData __result0;
                if (((global::SharpSDL.MessageBoxData.__Internal*) __Instance)->buttons == IntPtr.Zero) __result0 = null;
                else if (global::SharpSDL.MessageBoxButtonData.NativeToManagedMap.ContainsKey(((global::SharpSDL.MessageBoxData.__Internal*) __Instance)->buttons))
                    __result0 = (global::SharpSDL.MessageBoxButtonData) global::SharpSDL.MessageBoxButtonData.NativeToManagedMap[((global::SharpSDL.MessageBoxData.__Internal*) __Instance)->buttons];
                else __result0 = global::SharpSDL.MessageBoxButtonData.__CreateInstance(((global::SharpSDL.MessageBoxData.__Internal*) __Instance)->buttons);
                return __result0;
            }

            set
            {
                ((global::SharpSDL.MessageBoxData.__Internal*)__Instance)->buttons = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::SharpSDL.MessageBoxColorScheme ColorScheme
        {
            get
            {
                global::SharpSDL.MessageBoxColorScheme __result0;
                if (((global::SharpSDL.MessageBoxData.__Internal*) __Instance)->colorScheme == IntPtr.Zero) __result0 = null;
                else if (global::SharpSDL.MessageBoxColorScheme.NativeToManagedMap.ContainsKey(((global::SharpSDL.MessageBoxData.__Internal*) __Instance)->colorScheme))
                    __result0 = (global::SharpSDL.MessageBoxColorScheme) global::SharpSDL.MessageBoxColorScheme.NativeToManagedMap[((global::SharpSDL.MessageBoxData.__Internal*) __Instance)->colorScheme];
                else __result0 = global::SharpSDL.MessageBoxColorScheme.__CreateInstance(((global::SharpSDL.MessageBoxData.__Internal*) __Instance)->colorScheme);
                return __result0;
            }

            set
            {
                ((global::SharpSDL.MessageBoxData.__Internal*)__Instance)->colorScheme = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class SDLMessagebox
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_ShowMessageBox")]
            internal static extern int ShowMessageBox(global::System.IntPtr messageboxdata, int* buttonid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_ShowSimpleMessageBox")]
            internal static extern int ShowSimpleMessageBox(uint flags, [MarshalAs(UnmanagedType.LPStr)] string title, [MarshalAs(UnmanagedType.LPStr)] string message, global::System.IntPtr window);
        }

        /// <summary>Create a modal message box.</summary>
/// <param name="messageboxdata">The SDL_MessageBoxData structure with title, text, etc.</param>
/// <param name="buttonid">The pointer to which user id of hit button should be copied.</param>
/// <returns>
/// <para>-1 on error, otherwise 0 and buttonid contains user id of button</para>
/// <para>hit or -1 if dialog was closed.</para>
/// </returns>
/// <remarks>
/// <para>This function should be called on the thread that created the parent</para>
/// <para>window, or on the main thread if the messagebox has no parent.  It will</para>
/// <para>block execution of that thread until the user clicks a button or</para>
/// <para>closes the messagebox.</para>
/// </remarks>
        public static int ShowMessageBox(global::SharpSDL.MessageBoxData messageboxdata, ref int buttonid)
        {
            var __arg0 = ReferenceEquals(messageboxdata, null) ? global::System.IntPtr.Zero : messageboxdata.__Instance;
            fixed (int* __buttonid1 = &buttonid)
            {
                var __arg1 = __buttonid1;
                var __ret = __Internal.ShowMessageBox(__arg0, __arg1);
                return __ret;
            }
        }

        /// <summary>Create a simple modal message box</summary>
/// <param name="flags">::SDL_MessageBoxFlags</param>
/// <param name="title">UTF-8 title text</param>
/// <param name="message">UTF-8 message text</param>
/// <param name="window">The parent window, or NULL for no parent</param>
/// <returns>0 on success, -1 on error</returns>
/// <remarks>SDL_ShowMessageBox</remarks>
        public static int ShowSimpleMessageBox(uint flags, string title, string message, global::SharpSDL.Window window)
        {
            var __arg3 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.ShowSimpleMessageBox(flags, title, message, __arg3);
            return __ret;
        }
    }
}
