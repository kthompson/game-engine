// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SharpSDL
{
    /// <summary>Information the version of SDL in use.</summary>
/// <remarks>
/// <para>Represents the library's version as three levels: major revision</para>
/// <para>(increments with massive changes, additions, and enhancements),</para>
/// <para>minor revision (increments with backwards-compatible changes to the</para>
/// <para>major revision), and patchlevel (increments with fixes to the minor</para>
/// <para>revision).</para>
/// <para>SDL_VERSION</para>
/// <para>SDL_GetVersion</para>
/// </remarks>
    public unsafe partial class Version : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 3)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal byte major;

            [FieldOffset(1)]
            internal byte minor;

            [FieldOffset(2)]
            internal byte patch;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_version@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.Version> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.Version>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.Version __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.Version(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.Version __CreateInstance(global::SharpSDL.Version.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.Version(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.Version.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.Version.__Internal));
            *(global::SharpSDL.Version.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Version(global::SharpSDL.Version.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Version(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Version()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.Version.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public Version(global::SharpSDL.Version _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.Version.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.Version.__Internal*) __Instance) = *((global::SharpSDL.Version.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.Version __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte Major
        {
            get
            {
                return ((global::SharpSDL.Version.__Internal*) __Instance)->major;
            }

            set
            {
                ((global::SharpSDL.Version.__Internal*)__Instance)->major = value;
            }
        }

        public byte Minor
        {
            get
            {
                return ((global::SharpSDL.Version.__Internal*) __Instance)->minor;
            }

            set
            {
                ((global::SharpSDL.Version.__Internal*)__Instance)->minor = value;
            }
        }

        public byte Patch
        {
            get
            {
                return ((global::SharpSDL.Version.__Internal*) __Instance)->patch;
            }

            set
            {
                ((global::SharpSDL.Version.__Internal*)__Instance)->patch = value;
            }
        }
    }

    public unsafe partial class SDLVersion
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetVersion")]
            internal static extern void GetVersion(global::System.IntPtr ver);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetRevision")]
            internal static extern global::System.IntPtr GetRevision();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetRevisionNumber")]
            internal static extern int GetRevisionNumber();
        }

        /// <summary>Get the version of SDL that is linked against your program.</summary>
/// <remarks>
/// <para>If you are linking to SDL dynamically, then it is possible that the</para>
/// <para>current version will be different than the version you compiled against.</para>
/// <para>This function returns the current version, while SDL_VERSION() is a</para>
/// <para>macro that tells you what version you compiled with.</para>
/// <para>This function may be called safely at any time, even before SDL_Init().</para>
/// <para>SDL_VERSION</para>
/// </remarks>
        public static void GetVersion(global::SharpSDL.Version ver)
        {
            var __arg0 = ReferenceEquals(ver, null) ? global::System.IntPtr.Zero : ver.__Instance;
            __Internal.GetVersion(__arg0);
        }

        /// <summary>Get the code revision of SDL that is linked against your program.</summary>
/// <remarks>
/// <para>Returns an arbitrary string (a hash value) uniquely identifying the</para>
/// <para>exact revision of the SDL library in use, and is only useful in comparing</para>
/// <para>against other revisions. It is NOT an incrementing number.</para>
/// </remarks>
        public static string GetRevision()
        {
            var __ret = __Internal.GetRevision();
            return Marshal.PtrToStringAnsi(__ret);
        }

        /// <summary>Get the revision number of SDL that is linked against your program.</summary>
/// <remarks>
/// <para>Returns a number uniquely identifying the exact revision of the SDL</para>
/// <para>library in use. It is an incrementing number based on commits to</para>
/// <para>hg.libsdl.org.</para>
/// </remarks>
        public static int GetRevisionNumber()
        {
            var __ret = __Internal.GetRevisionNumber();
            return __ret;
        }
    }
}
