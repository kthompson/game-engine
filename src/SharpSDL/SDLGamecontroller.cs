// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SharpSDL
{
    public enum GameControllerBindType
    {
        CONTROLLER_BINDTYPE_NONE = 0,
        CONTROLLER_BINDTYPE_BUTTON = 1,
        CONTROLLER_BINDTYPE_AXIS = 2,
        CONTROLLER_BINDTYPE_HAT = 3
    }

    /// <summary>The list of axes available from a controller</summary>
/// <remarks>
/// <para>Thumbstick axis values range from SDL_JOYSTICK_AXIS_MIN to SDL_JOYSTICK_AXIS_MAX,</para>
/// <para>and are centered within ~8000 of zero, though advanced UI will allow users to set</para>
/// <para>or autodetect the dead zone, which varies between controllers.</para>
/// <para>Trigger axis values range from 0 to SDL_JOYSTICK_AXIS_MAX.</para>
/// </remarks>
    public enum GameControllerAxis
    {
        CONTROLLER_AXIS_INVALID = -1,
        CONTROLLER_AXIS_LEFTX = 0,
        CONTROLLER_AXIS_LEFTY = 1,
        CONTROLLER_AXIS_RIGHTX = 2,
        CONTROLLER_AXIS_RIGHTY = 3,
        CONTROLLER_AXIS_TRIGGERLEFT = 4,
        CONTROLLER_AXIS_TRIGGERRIGHT = 5,
        CONTROLLER_AXIS_MAX = 6
    }

    /// <summary>The list of buttons available from a controller</summary>
    public enum GameControllerButton
    {
        CONTROLLER_BUTTON_INVALID = -1,
        CONTROLLER_BUTTON_A = 0,
        CONTROLLER_BUTTON_B = 1,
        CONTROLLER_BUTTON_X = 2,
        CONTROLLER_BUTTON_Y = 3,
        CONTROLLER_BUTTON_BACK = 4,
        CONTROLLER_BUTTON_GUIDE = 5,
        CONTROLLER_BUTTON_START = 6,
        CONTROLLER_BUTTON_LEFTSTICK = 7,
        CONTROLLER_BUTTON_RIGHTSTICK = 8,
        CONTROLLER_BUTTON_LEFTSHOULDER = 9,
        CONTROLLER_BUTTON_RIGHTSHOULDER = 10,
        CONTROLLER_BUTTON_DPAD_UP = 11,
        CONTROLLER_BUTTON_DPAD_DOWN = 12,
        CONTROLLER_BUTTON_DPAD_LEFT = 13,
        CONTROLLER_BUTTON_DPAD_RIGHT = 14,
        CONTROLLER_BUTTON_MAX = 15
    }

    /// <summary>The gamecontroller structure used to identify an SDL game controller</summary>
    public unsafe partial class SDL_GameController
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.SDL_GameController> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.SDL_GameController>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.SDL_GameController __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.SDL_GameController(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.SDL_GameController __CreateInstance(global::SharpSDL.SDL_GameController.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.SDL_GameController(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.SDL_GameController.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.SDL_GameController.__Internal));
            *(global::SharpSDL.SDL_GameController.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SDL_GameController(global::SharpSDL.SDL_GameController.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SDL_GameController(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    /// <summary>Get the SDL joystick layer binding for this controller button/axis mapping</summary>
    public unsafe partial class GameControllerButtonBind : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::SharpSDL.GameControllerBindType bindType;

            [FieldOffset(4)]
            internal global::SharpSDL.GameControllerButtonBind.Value.__Internal value;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_GameControllerButtonBind@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public unsafe partial struct Value
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal int button;

                [FieldOffset(0)]
                internal int axis;

                [FieldOffset(0)]
                internal global::SharpSDL.GameControllerButtonBind.Value.Hat.__Internal hat;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??0<unnamed-type-value>@SDL_GameControllerButtonBind@@QEAA@AEBT01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            public unsafe partial class Hat : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal int hat;

                    [FieldOffset(4)]
                    internal int hat_mask;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="??0<unnamed-type-hat>@<unnamed-type-value>@SDL_GameControllerButtonBind@@QEAA@AEBU012@@Z")]
                    internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.GameControllerButtonBind.Value.Hat> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.GameControllerButtonBind.Value.Hat>();
                protected internal void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                internal static global::SharpSDL.GameControllerButtonBind.Value.Hat __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new global::SharpSDL.GameControllerButtonBind.Value.Hat(native.ToPointer(), skipVTables);
                }

                internal static global::SharpSDL.GameControllerButtonBind.Value.Hat __CreateInstance(global::SharpSDL.GameControllerButtonBind.Value.Hat.__Internal native, bool skipVTables = false)
                {
                    return new global::SharpSDL.GameControllerButtonBind.Value.Hat(native, skipVTables);
                }

                private static void* __CopyValue(global::SharpSDL.GameControllerButtonBind.Value.Hat.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.GameControllerButtonBind.Value.Hat.__Internal));
                    *(global::SharpSDL.GameControllerButtonBind.Value.Hat.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private Hat(global::SharpSDL.GameControllerButtonBind.Value.Hat.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Hat(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Hat()
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.GameControllerButtonBind.Value.Hat.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                public Hat(global::SharpSDL.GameControllerButtonBind.Value.Hat _0)
                {
                    __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.GameControllerButtonBind.Value.Hat.__Internal));
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((global::SharpSDL.GameControllerButtonBind.Value.Hat.__Internal*) __Instance) = *((global::SharpSDL.GameControllerButtonBind.Value.Hat.__Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    if (__Instance == IntPtr.Zero)
                        return;
                    global::SharpSDL.GameControllerButtonBind.Value.Hat __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                    __Instance = IntPtr.Zero;
                }

                public int hat
                {
                    get
                    {
                        return ((global::SharpSDL.GameControllerButtonBind.Value.Hat.__Internal*) __Instance)->hat;
                    }

                    set
                    {
                        ((global::SharpSDL.GameControllerButtonBind.Value.Hat.__Internal*)__Instance)->hat = value;
                    }
                }

                public int HatMask
                {
                    get
                    {
                        return ((global::SharpSDL.GameControllerButtonBind.Value.Hat.__Internal*) __Instance)->hat_mask;
                    }

                    set
                    {
                        ((global::SharpSDL.GameControllerButtonBind.Value.Hat.__Internal*)__Instance)->hat_mask = value;
                    }
                }
            }

            private Value.__Internal __instance;
            internal Value.__Internal __Instance { get { return __instance; } }

            internal static global::SharpSDL.GameControllerButtonBind.Value __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::SharpSDL.GameControllerButtonBind.Value(native.ToPointer(), skipVTables);
            }

            internal static global::SharpSDL.GameControllerButtonBind.Value __CreateInstance(global::SharpSDL.GameControllerButtonBind.Value.__Internal native, bool skipVTables = false)
            {
                return new global::SharpSDL.GameControllerButtonBind.Value(native, skipVTables);
            }

            private Value(global::SharpSDL.GameControllerButtonBind.Value.__Internal native, bool skipVTables = false)
                : this()
            {
                __instance = native;
            }

            private Value(void* native, bool skipVTables = false) : this()
            {
                __instance = *(global::SharpSDL.GameControllerButtonBind.Value.__Internal*) native;
            }

            public Value(global::SharpSDL.GameControllerButtonBind.Value _0)
                : this()
            {
                var ____arg0 = _0.__Instance;
                var __arg0 = new global::System.IntPtr(&____arg0);
                fixed (__Internal* __instancePtr = &__instance)
                {
                    __Internal.cctor(new global::System.IntPtr(__instancePtr), __arg0);
                }
            }

            public int Button
            {
                get
                {
                    return __instance.button;
                }

                set
                {
                    __instance.button = value;
                }
            }

            public int Axis
            {
                get
                {
                    return __instance.axis;
                }

                set
                {
                    __instance.axis = value;
                }
            }

            public global::SharpSDL.GameControllerButtonBind.Value.Hat hat
            {
                get
                {
                    return global::SharpSDL.GameControllerButtonBind.Value.Hat.__CreateInstance(__instance.hat);
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    __instance.hat = *(global::SharpSDL.GameControllerButtonBind.Value.Hat.__Internal*) value.__Instance;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.GameControllerButtonBind> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.GameControllerButtonBind>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.GameControllerButtonBind __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.GameControllerButtonBind(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.GameControllerButtonBind __CreateInstance(global::SharpSDL.GameControllerButtonBind.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.GameControllerButtonBind(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.GameControllerButtonBind.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.GameControllerButtonBind.__Internal));
            *(global::SharpSDL.GameControllerButtonBind.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GameControllerButtonBind(global::SharpSDL.GameControllerButtonBind.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GameControllerButtonBind(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public GameControllerButtonBind()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.GameControllerButtonBind.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public GameControllerButtonBind(global::SharpSDL.GameControllerButtonBind _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.GameControllerButtonBind.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.GameControllerButtonBind.__Internal*) __Instance) = *((global::SharpSDL.GameControllerButtonBind.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.GameControllerButtonBind __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SharpSDL.GameControllerBindType BindType
        {
            get
            {
                return ((global::SharpSDL.GameControllerButtonBind.__Internal*) __Instance)->bindType;
            }

            set
            {
                ((global::SharpSDL.GameControllerButtonBind.__Internal*)__Instance)->bindType = value;
            }
        }

        public global::SharpSDL.GameControllerButtonBind.Value value
        {
            get
            {
                return global::SharpSDL.GameControllerButtonBind.Value.__CreateInstance(((global::SharpSDL.GameControllerButtonBind.__Internal*) __Instance)->value);
            }

            set
            {
                ((global::SharpSDL.GameControllerButtonBind.__Internal*)__Instance)->value = value.__Instance;
            }
        }
    }

    public unsafe partial class SDLGamecontroller
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerAddMapping")]
            internal static extern int GameControllerAddMapping([MarshalAs(UnmanagedType.LPStr)] string mappingString);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerNumMappings")]
            internal static extern int GameControllerNumMappings();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerMappingForIndex")]
            internal static extern sbyte* GameControllerMappingForIndex(int mapping_index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerMappingForGUID")]
            internal static extern sbyte* GameControllerMappingForGUID(global::System.IntPtr guid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerMapping")]
            internal static extern sbyte* GameControllerMapping(global::System.IntPtr gamecontroller);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerNameForIndex")]
            internal static extern global::System.IntPtr GameControllerNameForIndex(int joystick_index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerMappingForDeviceIndex")]
            internal static extern sbyte* GameControllerMappingForDeviceIndex(int joystick_index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerOpen")]
            internal static extern global::System.IntPtr GameControllerOpen(int joystick_index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerFromInstanceID")]
            internal static extern global::System.IntPtr GameControllerFromInstanceID(int joyid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerName")]
            internal static extern global::System.IntPtr GameControllerName(global::System.IntPtr gamecontroller);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerGetPlayerIndex")]
            internal static extern int GameControllerGetPlayerIndex(global::System.IntPtr gamecontroller);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerGetVendor")]
            internal static extern ushort GameControllerGetVendor(global::System.IntPtr gamecontroller);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerGetProduct")]
            internal static extern ushort GameControllerGetProduct(global::System.IntPtr gamecontroller);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerGetProductVersion")]
            internal static extern ushort GameControllerGetProductVersion(global::System.IntPtr gamecontroller);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerGetJoystick")]
            internal static extern global::System.IntPtr GameControllerGetJoystick(global::System.IntPtr gamecontroller);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerEventState")]
            internal static extern int GameControllerEventState(int state);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerUpdate")]
            internal static extern void GameControllerUpdate();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerGetAxisFromString")]
            internal static extern global::SharpSDL.GameControllerAxis GameControllerGetAxisFromString([MarshalAs(UnmanagedType.LPStr)] string pchString);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerGetStringForAxis")]
            internal static extern global::System.IntPtr GameControllerGetStringForAxis(global::SharpSDL.GameControllerAxis axis);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerGetBindForAxis")]
            internal static extern global::SharpSDL.GameControllerButtonBind.__Internal GameControllerGetBindForAxis(global::System.IntPtr gamecontroller, global::SharpSDL.GameControllerAxis axis);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerGetAxis")]
            internal static extern short GameControllerGetAxis(global::System.IntPtr gamecontroller, global::SharpSDL.GameControllerAxis axis);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerGetButtonFromString")]
            internal static extern global::SharpSDL.GameControllerButton GameControllerGetButtonFromString([MarshalAs(UnmanagedType.LPStr)] string pchString);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerGetStringForButton")]
            internal static extern global::System.IntPtr GameControllerGetStringForButton(global::SharpSDL.GameControllerButton button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerGetBindForButton")]
            internal static extern global::SharpSDL.GameControllerButtonBind.__Internal GameControllerGetBindForButton(global::System.IntPtr gamecontroller, global::SharpSDL.GameControllerButton button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerGetButton")]
            internal static extern byte GameControllerGetButton(global::System.IntPtr gamecontroller, global::SharpSDL.GameControllerButton button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerRumble")]
            internal static extern int GameControllerRumble(global::System.IntPtr gamecontroller, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GameControllerClose")]
            internal static extern void GameControllerClose(global::System.IntPtr gamecontroller);
        }

        /// <summary>Add or update an existing mapping configuration</summary>
/// <returns>1 if mapping is added, 0 if updated, -1 on error</returns>
        public static int GameControllerAddMapping(string mappingString)
        {
            var __ret = __Internal.GameControllerAddMapping(mappingString);
            return __ret;
        }

        /// <summary>Get the number of mappings installed</summary>
/// <returns>the number of mappings</returns>
        public static int GameControllerNumMappings()
        {
            var __ret = __Internal.GameControllerNumMappings();
            return __ret;
        }

        /// <summary>Get the mapping at a particular index.</summary>
/// <returns>the mapping string.  Must be freed with SDL_free().  Returns NULL if the index is out of range.</returns>
        public static sbyte* GameControllerMappingForIndex(int mapping_index)
        {
            var __ret = __Internal.GameControllerMappingForIndex(mapping_index);
            return __ret;
        }

        /// <summary>Get a mapping string for a GUID</summary>
/// <returns>the mapping string.  Must be freed with SDL_free().  Returns NULL if no mapping is available</returns>
        public static sbyte* GameControllerMappingForGUID(global::SharpSDL.JoystickGUID guid)
        {
            if (ReferenceEquals(guid, null))
                throw new global::System.ArgumentNullException("guid", "Cannot be null because it is passed by value.");
            var __arg0 = guid.__Instance;
            var __ret = __Internal.GameControllerMappingForGUID(__arg0);
            return __ret;
        }

        /// <summary>Get a mapping string for an open GameController</summary>
/// <returns>the mapping string.  Must be freed with SDL_free().  Returns NULL if no mapping is available</returns>
        public static sbyte* GameControllerMapping(global::SharpSDL.SDL_GameController gamecontroller)
        {
            var __arg0 = ReferenceEquals(gamecontroller, null) ? global::System.IntPtr.Zero : gamecontroller.__Instance;
            var __ret = __Internal.GameControllerMapping(__arg0);
            return __ret;
        }

        /// <summary>
/// <para>Get the implementation dependent name of a game controller.</para>
/// <para>This can be called before any controllers are opened.</para>
/// <para>If no name can be found, this function returns NULL.</para>
/// </summary>
        public static string GameControllerNameForIndex(int joystick_index)
        {
            var __ret = __Internal.GameControllerNameForIndex(joystick_index);
            return Marshal.PtrToStringAnsi(__ret);
        }

        /// <summary>
/// <para>Get the mapping of a game controller.</para>
/// <para>This can be called before any controllers are opened.</para>
/// </summary>
/// <returns>the mapping string.  Must be freed with SDL_free().  Returns NULL if no mapping is available</returns>
        public static sbyte* GameControllerMappingForDeviceIndex(int joystick_index)
        {
            var __ret = __Internal.GameControllerMappingForDeviceIndex(joystick_index);
            return __ret;
        }

        /// <summary>
/// <para>Open a game controller for use.</para>
/// <para>The index passed as an argument refers to the N'th game controller on the system.</para>
/// <para>This index is not the value which will identify this controller in future</para>
/// <para>controller events.  The joystick's instance id (::SDL_JoystickID) will be</para>
/// <para>used there instead.</para>
/// </summary>
/// <returns>A controller identifier, or NULL if an error occurred.</returns>
        public static global::SharpSDL.SDL_GameController GameControllerOpen(int joystick_index)
        {
            var __ret = __Internal.GameControllerOpen(joystick_index);
            global::SharpSDL.SDL_GameController __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::SharpSDL.SDL_GameController.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::SharpSDL.SDL_GameController) global::SharpSDL.SDL_GameController.NativeToManagedMap[__ret];
            else __result0 = global::SharpSDL.SDL_GameController.__CreateInstance(__ret);
            return __result0;
        }

        /// <summary>Return the SDL_GameController associated with an instance id.</summary>
        public static global::SharpSDL.SDL_GameController GameControllerFromInstanceID(int joyid)
        {
            var __ret = __Internal.GameControllerFromInstanceID(joyid);
            global::SharpSDL.SDL_GameController __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::SharpSDL.SDL_GameController.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::SharpSDL.SDL_GameController) global::SharpSDL.SDL_GameController.NativeToManagedMap[__ret];
            else __result0 = global::SharpSDL.SDL_GameController.__CreateInstance(__ret);
            return __result0;
        }

        /// <summary>Return the name for this currently opened controller</summary>
        public static string GameControllerName(global::SharpSDL.SDL_GameController gamecontroller)
        {
            var __arg0 = ReferenceEquals(gamecontroller, null) ? global::System.IntPtr.Zero : gamecontroller.__Instance;
            var __ret = __Internal.GameControllerName(__arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        /// <summary>Get the player index of an opened game controller, or -1 if it's not available</summary>
/// <remarks>For XInput controllers this returns the XInput user index.</remarks>
        public static int GameControllerGetPlayerIndex(global::SharpSDL.SDL_GameController gamecontroller)
        {
            var __arg0 = ReferenceEquals(gamecontroller, null) ? global::System.IntPtr.Zero : gamecontroller.__Instance;
            var __ret = __Internal.GameControllerGetPlayerIndex(__arg0);
            return __ret;
        }

        /// <summary>
/// <para>Get the USB vendor ID of an opened controller, if available.</para>
/// <para>If the vendor ID isn't available this function returns 0.</para>
/// </summary>
        public static ushort GameControllerGetVendor(global::SharpSDL.SDL_GameController gamecontroller)
        {
            var __arg0 = ReferenceEquals(gamecontroller, null) ? global::System.IntPtr.Zero : gamecontroller.__Instance;
            var __ret = __Internal.GameControllerGetVendor(__arg0);
            return __ret;
        }

        /// <summary>
/// <para>Get the USB product ID of an opened controller, if available.</para>
/// <para>If the product ID isn't available this function returns 0.</para>
/// </summary>
        public static ushort GameControllerGetProduct(global::SharpSDL.SDL_GameController gamecontroller)
        {
            var __arg0 = ReferenceEquals(gamecontroller, null) ? global::System.IntPtr.Zero : gamecontroller.__Instance;
            var __ret = __Internal.GameControllerGetProduct(__arg0);
            return __ret;
        }

        /// <summary>
/// <para>Get the product version of an opened controller, if available.</para>
/// <para>If the product version isn't available this function returns 0.</para>
/// </summary>
        public static ushort GameControllerGetProductVersion(global::SharpSDL.SDL_GameController gamecontroller)
        {
            var __arg0 = ReferenceEquals(gamecontroller, null) ? global::System.IntPtr.Zero : gamecontroller.__Instance;
            var __ret = __Internal.GameControllerGetProductVersion(__arg0);
            return __ret;
        }

        /// <summary>Get the underlying joystick object used by a controller</summary>
        public static global::SharpSDL.SDL_Joystick GameControllerGetJoystick(global::SharpSDL.SDL_GameController gamecontroller)
        {
            var __arg0 = ReferenceEquals(gamecontroller, null) ? global::System.IntPtr.Zero : gamecontroller.__Instance;
            var __ret = __Internal.GameControllerGetJoystick(__arg0);
            global::SharpSDL.SDL_Joystick __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::SharpSDL.SDL_Joystick.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::SharpSDL.SDL_Joystick) global::SharpSDL.SDL_Joystick.NativeToManagedMap[__ret];
            else __result0 = global::SharpSDL.SDL_Joystick.__CreateInstance(__ret);
            return __result0;
        }

        /// <summary>Enable/disable controller event polling.</summary>
/// <remarks>
/// <para>If controller events are disabled, you must call SDL_GameControllerUpdate()</para>
/// <para>yourself and check the state of the controller when you want controller</para>
/// <para>information.</para>
/// <para>The state can be one of ::SDL_QUERY, ::SDL_ENABLE or ::SDL_IGNORE.</para>
/// </remarks>
        public static int GameControllerEventState(int state)
        {
            var __ret = __Internal.GameControllerEventState(state);
            return __ret;
        }

        /// <summary>Update the current state of the open game controllers.</summary>
/// <remarks>
/// <para>This is called automatically by the event loop if any game controller</para>
/// <para>events are enabled.</para>
/// </remarks>
        public static void GameControllerUpdate()
        {
            __Internal.GameControllerUpdate();
        }

        /// <summary>turn this string into a axis mapping</summary>
        public static global::SharpSDL.GameControllerAxis GameControllerGetAxisFromString(string pchString)
        {
            var __ret = __Internal.GameControllerGetAxisFromString(pchString);
            return __ret;
        }

        /// <summary>turn this axis enum into a string mapping</summary>
        public static string GameControllerGetStringForAxis(global::SharpSDL.GameControllerAxis axis)
        {
            var __ret = __Internal.GameControllerGetStringForAxis(axis);
            return Marshal.PtrToStringAnsi(__ret);
        }

        /// <summary>Get the SDL joystick layer binding for this controller button mapping</summary>
        public static global::SharpSDL.GameControllerButtonBind GameControllerGetBindForAxis(global::SharpSDL.SDL_GameController gamecontroller, global::SharpSDL.GameControllerAxis axis)
        {
            var __arg0 = ReferenceEquals(gamecontroller, null) ? global::System.IntPtr.Zero : gamecontroller.__Instance;
            var __ret = __Internal.GameControllerGetBindForAxis(__arg0, axis);
            return global::SharpSDL.GameControllerButtonBind.__CreateInstance(__ret);
        }

        /// <summary>Get the current state of an axis control on a game controller.</summary>
/// <remarks>
/// <para>The state is a value ranging from -32768 to 32767 (except for the triggers,</para>
/// <para>which range from 0 to 32767).</para>
/// <para>The axis indices start at index 0.</para>
/// </remarks>
        public static short GameControllerGetAxis(global::SharpSDL.SDL_GameController gamecontroller, global::SharpSDL.GameControllerAxis axis)
        {
            var __arg0 = ReferenceEquals(gamecontroller, null) ? global::System.IntPtr.Zero : gamecontroller.__Instance;
            var __ret = __Internal.GameControllerGetAxis(__arg0, axis);
            return __ret;
        }

        /// <summary>turn this string into a button mapping</summary>
        public static global::SharpSDL.GameControllerButton GameControllerGetButtonFromString(string pchString)
        {
            var __ret = __Internal.GameControllerGetButtonFromString(pchString);
            return __ret;
        }

        /// <summary>turn this button enum into a string mapping</summary>
        public static string GameControllerGetStringForButton(global::SharpSDL.GameControllerButton button)
        {
            var __ret = __Internal.GameControllerGetStringForButton(button);
            return Marshal.PtrToStringAnsi(__ret);
        }

        /// <summary>Get the SDL joystick layer binding for this controller button mapping</summary>
        public static global::SharpSDL.GameControllerButtonBind GameControllerGetBindForButton(global::SharpSDL.SDL_GameController gamecontroller, global::SharpSDL.GameControllerButton button)
        {
            var __arg0 = ReferenceEquals(gamecontroller, null) ? global::System.IntPtr.Zero : gamecontroller.__Instance;
            var __ret = __Internal.GameControllerGetBindForButton(__arg0, button);
            return global::SharpSDL.GameControllerButtonBind.__CreateInstance(__ret);
        }

        /// <summary>Get the current state of a button on a game controller.</summary>
/// <remarks>The button indices start at index 0.</remarks>
        public static byte GameControllerGetButton(global::SharpSDL.SDL_GameController gamecontroller, global::SharpSDL.GameControllerButton button)
        {
            var __arg0 = ReferenceEquals(gamecontroller, null) ? global::System.IntPtr.Zero : gamecontroller.__Instance;
            var __ret = __Internal.GameControllerGetButton(__arg0, button);
            return __ret;
        }

        /// <summary>
/// <para>Trigger a rumble effect</para>
/// <para>Each call to this function cancels any previous rumble effect, and calling it with 0 intensity stops any rumbling.</para>
/// </summary>
/// <param name="gamecontroller">The controller to vibrate</param>
/// <param name="low_frequency_rumble">The intensity of the low frequency (left) rumble motor, from 0 to 0xFFFF</param>
/// <param name="high_frequency_rumble">The intensity of the high frequency (right) rumble motor, from 0 to 0xFFFF</param>
/// <param name="duration_ms">The duration of the rumble effect, in milliseconds</param>
/// <returns>0, or -1 if rumble isn't supported on this joystick</returns>
        public static int GameControllerRumble(global::SharpSDL.SDL_GameController gamecontroller, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms)
        {
            var __arg0 = ReferenceEquals(gamecontroller, null) ? global::System.IntPtr.Zero : gamecontroller.__Instance;
            var __ret = __Internal.GameControllerRumble(__arg0, low_frequency_rumble, high_frequency_rumble, duration_ms);
            return __ret;
        }

        /// <summary>Close a controller previously opened with SDL_GameControllerOpen().</summary>
        public static void GameControllerClose(global::SharpSDL.SDL_GameController gamecontroller)
        {
            var __arg0 = ReferenceEquals(gamecontroller, null) ? global::System.IntPtr.Zero : gamecontroller.__Instance;
            __Internal.GameControllerClose(__arg0);
        }
    }
}
