// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SharpSDL
{
    /// <summary>Function prototype for the timer callback function.</summary>
/// <remarks>
/// <para>The callback function is passed the current timer interval and returns</para>
/// <para>the next timer interval.  If the returned value is the same as the one</para>
/// <para>passed in, the periodic alarm continues, otherwise a new alarm is</para>
/// <para>scheduled.  If the callback returns 0, the periodic alarm is cancelled.</para>
/// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate uint TimerCallback(uint interval, global::System.IntPtr param);

    /// <summary>Definition of the timer ID type.</summary>
    public unsafe partial class SDLTimer
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetTicks")]
            internal static extern uint GetTicks();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetPerformanceCounter")]
            internal static extern ulong GetPerformanceCounter();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetPerformanceFrequency")]
            internal static extern ulong GetPerformanceFrequency();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_Delay")]
            internal static extern void Delay(uint ms);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_AddTimer")]
            internal static extern int AddTimer(uint interval, global::System.IntPtr callback, global::System.IntPtr param);
        }

        /// <summary>Get the number of milliseconds since the SDL library initialization.</summary>
/// <remarks>This value wraps if the program runs for more than ~49 days.</remarks>
        public static uint GetTicks()
        {
            var __ret = __Internal.GetTicks();
            return __ret;
        }

        /// <summary>Get the current value of the high resolution counter</summary>
        public static ulong GetPerformanceCounter()
        {
            var __ret = __Internal.GetPerformanceCounter();
            return __ret;
        }

        /// <summary>Get the count per second of the high resolution counter</summary>
        public static ulong GetPerformanceFrequency()
        {
            var __ret = __Internal.GetPerformanceFrequency();
            return __ret;
        }

        /// <summary>Wait a specified number of milliseconds before returning.</summary>
        public static void Delay(uint ms)
        {
            __Internal.Delay(ms);
        }

        /// <summary>Add a new timer to the pool of timers already running.</summary>
/// <returns>A timer ID, or 0 when an error occurs.</returns>
        public static int AddTimer(uint interval, global::SharpSDL.TimerCallback callback, global::System.IntPtr param)
        {
            var __arg1 = callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            var __ret = __Internal.AddTimer(interval, __arg1, param);
            return __ret;
        }
    }
}
