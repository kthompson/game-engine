// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SharpSDL
{
    public enum TouchDeviceType
    {
        TOUCH_DEVICE_INVALID = -1,
        TOUCH_DEVICE_DIRECT = 0,
        TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1,
        TOUCH_DEVICE_INDIRECT_RELATIVE = 2
    }

    public unsafe partial class Finger : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal long id;

            [FieldOffset(8)]
            internal float x;

            [FieldOffset(12)]
            internal float y;

            [FieldOffset(16)]
            internal float pressure;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_Finger@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.Finger> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.Finger>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.Finger __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.Finger(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.Finger __CreateInstance(global::SharpSDL.Finger.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.Finger(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.Finger.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.Finger.__Internal));
            *(global::SharpSDL.Finger.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Finger(global::SharpSDL.Finger.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Finger(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Finger()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.Finger.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public Finger(global::SharpSDL.Finger _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.Finger.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.Finger.__Internal*) __Instance) = *((global::SharpSDL.Finger.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.Finger __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public long Id
        {
            get
            {
                return ((global::SharpSDL.Finger.__Internal*) __Instance)->id;
            }

            set
            {
                ((global::SharpSDL.Finger.__Internal*)__Instance)->id = value;
            }
        }

        public float X
        {
            get
            {
                return ((global::SharpSDL.Finger.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::SharpSDL.Finger.__Internal*)__Instance)->x = value;
            }
        }

        public float Y
        {
            get
            {
                return ((global::SharpSDL.Finger.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::SharpSDL.Finger.__Internal*)__Instance)->y = value;
            }
        }

        public float Pressure
        {
            get
            {
                return ((global::SharpSDL.Finger.__Internal*) __Instance)->pressure;
            }

            set
            {
                ((global::SharpSDL.Finger.__Internal*)__Instance)->pressure = value;
            }
        }
    }

    public unsafe partial class SDLTouch
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetNumTouchDevices")]
            internal static extern int GetNumTouchDevices();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetTouchDevice")]
            internal static extern long GetTouchDevice(int index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetTouchDeviceType")]
            internal static extern global::SharpSDL.TouchDeviceType GetTouchDeviceType(long touchID);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetNumTouchFingers")]
            internal static extern int GetNumTouchFingers(long touchID);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetTouchFinger")]
            internal static extern global::System.IntPtr GetTouchFinger(long touchID, int index);
        }

        /// <summary>Get the number of registered touch devices.</summary>
        public static int GetNumTouchDevices()
        {
            var __ret = __Internal.GetNumTouchDevices();
            return __ret;
        }

        /// <summary>Get the touch ID with the given index, or 0 if the index is invalid.</summary>
        public static long GetTouchDevice(int index)
        {
            var __ret = __Internal.GetTouchDevice(index);
            return __ret;
        }

        /// <summary>Get the type of the given touch device.</summary>
        public static global::SharpSDL.TouchDeviceType GetTouchDeviceType(long touchID)
        {
            var __ret = __Internal.GetTouchDeviceType(touchID);
            return __ret;
        }

        /// <summary>Get the number of active fingers for a given touch device.</summary>
        public static int GetNumTouchFingers(long touchID)
        {
            var __ret = __Internal.GetNumTouchFingers(touchID);
            return __ret;
        }

        /// <summary>Get the finger object of the given touch, with the given index.</summary>
        public static global::SharpSDL.Finger GetTouchFinger(long touchID, int index)
        {
            var __ret = __Internal.GetTouchFinger(touchID, index);
            global::SharpSDL.Finger __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::SharpSDL.Finger.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::SharpSDL.Finger) global::SharpSDL.Finger.NativeToManagedMap[__ret];
            else __result0 = global::SharpSDL.Finger.__CreateInstance(__ret);
            return __result0;
        }
    }
}
