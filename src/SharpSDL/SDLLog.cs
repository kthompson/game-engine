// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SharpSDL
{
    /// <summary>The predefined log categories</summary>
/// <remarks>
/// <para>By default the application category is enabled at the INFO level,</para>
/// <para>the assert category is enabled at the WARN level, test is enabled</para>
/// <para>at the VERBOSE level and all other categories are enabled at the</para>
/// <para>CRITICAL level.</para>
/// </remarks>
    public enum LogCategory
    {
        SDL_LOG_CATEGORY_APPLICATION = 0,
        SDL_LOG_CATEGORY_ERROR = 1,
        SDL_LOG_CATEGORY_ASSERT = 2,
        SDL_LOG_CATEGORY_SYSTEM = 3,
        SDL_LOG_CATEGORY_AUDIO = 4,
        SDL_LOG_CATEGORY_VIDEO = 5,
        SDL_LOG_CATEGORY_RENDER = 6,
        SDL_LOG_CATEGORY_INPUT = 7,
        SDL_LOG_CATEGORY_TEST = 8,
        SDL_LOG_CATEGORY_RESERVED1 = 9,
        SDL_LOG_CATEGORY_RESERVED2 = 10,
        SDL_LOG_CATEGORY_RESERVED3 = 11,
        SDL_LOG_CATEGORY_RESERVED4 = 12,
        SDL_LOG_CATEGORY_RESERVED5 = 13,
        SDL_LOG_CATEGORY_RESERVED6 = 14,
        SDL_LOG_CATEGORY_RESERVED7 = 15,
        SDL_LOG_CATEGORY_RESERVED8 = 16,
        SDL_LOG_CATEGORY_RESERVED9 = 17,
        SDL_LOG_CATEGORY_RESERVED10 = 18,
        SDL_LOG_CATEGORY_CUSTOM = 19
    }

    /// <summary>The predefined log priorities</summary>
    public enum LogPriority
    {
        LOG_PRIORITY_VERBOSE = 1,
        LOG_PRIORITY_DEBUG = 2,
        LOG_PRIORITY_INFO = 3,
        LOG_PRIORITY_WARN = 4,
        LOG_PRIORITY_ERROR = 5,
        LOG_PRIORITY_CRITICAL = 6,
        NUM_LOG_PRIORITIES = 7
    }

    /// <summary>The prototype for the log output function</summary>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void LogOutputFunction(global::System.IntPtr userdata, int category, global::SharpSDL.LogPriority priority, [MarshalAs(UnmanagedType.LPStr)] string message);

    public unsafe partial class SDLLog
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_LogSetAllPriority")]
            internal static extern void LogSetAllPriority(global::SharpSDL.LogPriority priority);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_LogSetPriority")]
            internal static extern void LogSetPriority(int category, global::SharpSDL.LogPriority priority);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_LogGetPriority")]
            internal static extern global::SharpSDL.LogPriority LogGetPriority(int category);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_LogResetPriorities")]
            internal static extern void LogResetPriorities();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_Log")]
            internal static extern void Log([MarshalAs(UnmanagedType.LPStr)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_LogVerbose")]
            internal static extern void LogVerbose(int category, [MarshalAs(UnmanagedType.LPStr)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_LogDebug")]
            internal static extern void LogDebug(int category, [MarshalAs(UnmanagedType.LPStr)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_LogInfo")]
            internal static extern void LogInfo(int category, [MarshalAs(UnmanagedType.LPStr)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_LogWarn")]
            internal static extern void LogWarn(int category, [MarshalAs(UnmanagedType.LPStr)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_LogError")]
            internal static extern void LogError(int category, [MarshalAs(UnmanagedType.LPStr)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_LogCritical")]
            internal static extern void LogCritical(int category, [MarshalAs(UnmanagedType.LPStr)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_LogMessage")]
            internal static extern void LogMessage(int category, global::SharpSDL.LogPriority priority, [MarshalAs(UnmanagedType.LPStr)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_LogGetOutputFunction")]
            internal static extern void LogGetOutputFunction(global::System.IntPtr callback, void** userdata);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_LogSetOutputFunction")]
            internal static extern void LogSetOutputFunction(global::System.IntPtr callback, global::System.IntPtr userdata);
        }

        /// <summary>Set the priority of all log categories</summary>
        public static void LogSetAllPriority(global::SharpSDL.LogPriority priority)
        {
            __Internal.LogSetAllPriority(priority);
        }

        /// <summary>Set the priority of a particular log category</summary>
        public static void LogSetPriority(int category, global::SharpSDL.LogPriority priority)
        {
            __Internal.LogSetPriority(category, priority);
        }

        /// <summary>Get the priority of a particular log category</summary>
        public static global::SharpSDL.LogPriority LogGetPriority(int category)
        {
            var __ret = __Internal.LogGetPriority(category);
            return __ret;
        }

        /// <summary>Reset all priorities to default.</summary>
/// <remarks>This is called in SDL_Quit().</remarks>
        public static void LogResetPriorities()
        {
            __Internal.LogResetPriorities();
        }

        /// <summary>Log a message with SDL_LOG_CATEGORY_APPLICATION and SDL_LOG_PRIORITY_INFO</summary>
        public static void Log(string fmt)
        {
            __Internal.Log(fmt);
        }

        /// <summary>Log a message with SDL_LOG_PRIORITY_VERBOSE</summary>
        public static void LogVerbose(int category, string fmt)
        {
            __Internal.LogVerbose(category, fmt);
        }

        /// <summary>Log a message with SDL_LOG_PRIORITY_DEBUG</summary>
        public static void LogDebug(int category, string fmt)
        {
            __Internal.LogDebug(category, fmt);
        }

        /// <summary>Log a message with SDL_LOG_PRIORITY_INFO</summary>
        public static void LogInfo(int category, string fmt)
        {
            __Internal.LogInfo(category, fmt);
        }

        /// <summary>Log a message with SDL_LOG_PRIORITY_WARN</summary>
        public static void LogWarn(int category, string fmt)
        {
            __Internal.LogWarn(category, fmt);
        }

        /// <summary>Log a message with SDL_LOG_PRIORITY_ERROR</summary>
        public static void LogError(int category, string fmt)
        {
            __Internal.LogError(category, fmt);
        }

        /// <summary>Log a message with SDL_LOG_PRIORITY_CRITICAL</summary>
        public static void LogCritical(int category, string fmt)
        {
            __Internal.LogCritical(category, fmt);
        }

        /// <summary>Log a message with the specified category and priority.</summary>
        public static void LogMessage(int category, global::SharpSDL.LogPriority priority, string fmt)
        {
            __Internal.LogMessage(category, priority, fmt);
        }

        /// <summary>Get the current log output function.</summary>
        public static void LogGetOutputFunction(global::SharpSDL.LogOutputFunction callback, void** userdata)
        {
            var __arg0 = callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            __Internal.LogGetOutputFunction(__arg0, userdata);
        }

        /// <summary>
/// <para>This function allows you to replace the default log output</para>
/// <para>function with one of your own.</para>
/// </summary>
        public static void LogSetOutputFunction(global::SharpSDL.LogOutputFunction callback, global::System.IntPtr userdata)
        {
            var __arg0 = callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            __Internal.LogSetOutputFunction(__arg0, userdata);
        }
    }
}
