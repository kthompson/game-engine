// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SharpSDL
{
    /// <summary>Pixel type.</summary>
    public enum SDL_PIXELTYPE
    {
        SDL_PIXELTYPE_UNKNOWN = 0,
        SDL_PIXELTYPE_INDEX1 = 1,
        SDL_PIXELTYPE_INDEX4 = 2,
        SDL_PIXELTYPE_INDEX8 = 3,
        SDL_PIXELTYPE_PACKED8 = 4,
        SDL_PIXELTYPE_PACKED16 = 5,
        SDL_PIXELTYPE_PACKED32 = 6,
        SDL_PIXELTYPE_ARRAYU8 = 7,
        SDL_PIXELTYPE_ARRAYU16 = 8,
        SDL_PIXELTYPE_ARRAYU32 = 9,
        SDL_PIXELTYPE_ARRAYF16 = 10,
        SDL_PIXELTYPE_ARRAYF32 = 11
    }

    /// <summary>Bitmap pixel order, high bit -&gt; low bit.</summary>
    public enum SDL_BITMAPORDER
    {
        SDL_BITMAPORDER_NONE = 0,
        SDL_BITMAPORDER_4321 = 1,
        SDL_BITMAPORDER_1234 = 2
    }

    /// <summary>Packed component order, high bit -&gt; low bit.</summary>
    public enum SDL_PACKEDORDER
    {
        SDL_PACKEDORDER_NONE = 0,
        SDL_PACKEDORDER_XRGB = 1,
        SDL_PACKEDORDER_RGBX = 2,
        SDL_PACKEDORDER_ARGB = 3,
        SDL_PACKEDORDER_RGBA = 4,
        SDL_PACKEDORDER_XBGR = 5,
        SDL_PACKEDORDER_BGRX = 6,
        SDL_PACKEDORDER_ABGR = 7,
        SDL_PACKEDORDER_BGRA = 8
    }

    /// <summary>Array component order, low byte -&gt; high byte.</summary>
    public enum SDL_ARRAYORDER
    {
        SDL_ARRAYORDER_NONE = 0,
        SDL_ARRAYORDER_RGB = 1,
        SDL_ARRAYORDER_RGBA = 2,
        SDL_ARRAYORDER_ARGB = 3,
        SDL_ARRAYORDER_BGR = 4,
        SDL_ARRAYORDER_BGRA = 5,
        SDL_ARRAYORDER_ABGR = 6
    }

    /// <summary>Packed component layout.</summary>
    public enum SDL_PACKEDLAYOUT
    {
        SDL_PACKEDLAYOUT_NONE = 0,
        SDL_PACKEDLAYOUT_332 = 1,
        SDL_PACKEDLAYOUT_4444 = 2,
        SDL_PACKEDLAYOUT_1555 = 3,
        SDL_PACKEDLAYOUT_5551 = 4,
        SDL_PACKEDLAYOUT_565 = 5,
        SDL_PACKEDLAYOUT_8888 = 6,
        SDL_PACKEDLAYOUT_2101010 = 7,
        SDL_PACKEDLAYOUT_1010102 = 8
    }

    public enum PixelFormatEnum
    {
        PIXELFORMAT_UNKNOWN = 0,
        PIXELFORMAT_INDEX1LSB = 286261504,
        PIXELFORMAT_INDEX1MSB = 287310080,
        PIXELFORMAT_INDEX4LSB = 303039488,
        PIXELFORMAT_INDEX4MSB = 304088064,
        PIXELFORMAT_INDEX8 = 318769153,
        PIXELFORMAT_RGB332 = 336660481,
        PIXELFORMAT_RGB444 = 353504258,
        PIXELFORMAT_RGB555 = 353570562,
        PIXELFORMAT_BGR555 = 357764866,
        PIXELFORMAT_ARGB4444 = 355602434,
        PIXELFORMAT_RGBA4444 = 356651010,
        PIXELFORMAT_ABGR4444 = 359796738,
        PIXELFORMAT_BGRA4444 = 360845314,
        PIXELFORMAT_ARGB1555 = 355667970,
        PIXELFORMAT_RGBA5551 = 356782082,
        PIXELFORMAT_ABGR1555 = 359862274,
        PIXELFORMAT_BGRA5551 = 360976386,
        PIXELFORMAT_RGB565 = 353701890,
        PIXELFORMAT_BGR565 = 357896194,
        PIXELFORMAT_RGB24 = 386930691,
        PIXELFORMAT_BGR24 = 390076419,
        PIXELFORMAT_RGB888 = 370546692,
        PIXELFORMAT_RGBX8888 = 371595268,
        PIXELFORMAT_BGR888 = 374740996,
        PIXELFORMAT_BGRX8888 = 375789572,
        PIXELFORMAT_ARGB8888 = 372645892,
        PIXELFORMAT_RGBA8888 = 373694468,
        PIXELFORMAT_ABGR8888 = 376840196,
        PIXELFORMAT_BGRA8888 = 377888772,
        PIXELFORMAT_ARGB2101010 = 372711428,
        PIXELFORMAT_RGBA32 = 376840196,
        PIXELFORMAT_ARGB32 = 377888772,
        PIXELFORMAT_BGRA32 = 372645892,
        PIXELFORMAT_ABGR32 = 373694468,
        /// <summary>Planar mode: Y + V + U  (3 planes)</summary>
        PIXELFORMAT_YV12 = 842094169,
        /// <summary>Planar mode: Y + U + V  (3 planes)</summary>
        PIXELFORMAT_IYUV = 1448433993,
        /// <summary>Packed mode: Y0+U0+Y1+V0 (1 plane)</summary>
        PIXELFORMAT_YUY2 = 844715353,
        /// <summary>Packed mode: U0+Y0+V0+Y1 (1 plane)</summary>
        PIXELFORMAT_UYVY = 1498831189,
        /// <summary>Packed mode: Y0+V0+Y1+U0 (1 plane)</summary>
        PIXELFORMAT_YVYU = 1431918169,
        /// <summary>Planar mode: Y + U/V interleaved  (2 planes)</summary>
        PIXELFORMAT_NV12 = 842094158,
        /// <summary>Planar mode: Y + V/U interleaved  (2 planes)</summary>
        PIXELFORMAT_NV21 = 825382478,
        /// <summary>Android video texture format</summary>
        PIXELFORMAT_EXTERNAL_OES = 542328143
    }

    public enum AlphaState
    {
        SDL_ALPHA_OPAQUE = 255,
        SDL_ALPHA_TRANSPARENT = 0
    }

    public unsafe partial class Color : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal byte r;

            [FieldOffset(1)]
            internal byte g;

            [FieldOffset(2)]
            internal byte b;

            [FieldOffset(3)]
            internal byte a;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_Color@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.Color> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.Color>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.Color __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.Color(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.Color __CreateInstance(global::SharpSDL.Color.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.Color(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.Color.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.Color.__Internal));
            *(global::SharpSDL.Color.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Color(global::SharpSDL.Color.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Color(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Color()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.Color.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public Color(global::SharpSDL.Color _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.Color.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.Color.__Internal*) __Instance) = *((global::SharpSDL.Color.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.Color __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte R
        {
            get
            {
                return ((global::SharpSDL.Color.__Internal*) __Instance)->r;
            }

            set
            {
                ((global::SharpSDL.Color.__Internal*)__Instance)->r = value;
            }
        }

        public byte G
        {
            get
            {
                return ((global::SharpSDL.Color.__Internal*) __Instance)->g;
            }

            set
            {
                ((global::SharpSDL.Color.__Internal*)__Instance)->g = value;
            }
        }

        public byte B
        {
            get
            {
                return ((global::SharpSDL.Color.__Internal*) __Instance)->b;
            }

            set
            {
                ((global::SharpSDL.Color.__Internal*)__Instance)->b = value;
            }
        }

        public byte A
        {
            get
            {
                return ((global::SharpSDL.Color.__Internal*) __Instance)->a;
            }

            set
            {
                ((global::SharpSDL.Color.__Internal*)__Instance)->a = value;
            }
        }
    }

    public unsafe partial class Palette : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int ncolors;

            [FieldOffset(8)]
            internal global::System.IntPtr colors;

            [FieldOffset(16)]
            internal uint version;

            [FieldOffset(20)]
            internal int refcount;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_Palette@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.Palette> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.Palette>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.Palette __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.Palette(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.Palette __CreateInstance(global::SharpSDL.Palette.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.Palette(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.Palette.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.Palette.__Internal));
            *(global::SharpSDL.Palette.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Palette(global::SharpSDL.Palette.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Palette(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Palette()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.Palette.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public Palette(global::SharpSDL.Palette _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.Palette.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.Palette.__Internal*) __Instance) = *((global::SharpSDL.Palette.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.Palette __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Ncolors
        {
            get
            {
                return ((global::SharpSDL.Palette.__Internal*) __Instance)->ncolors;
            }

            set
            {
                ((global::SharpSDL.Palette.__Internal*)__Instance)->ncolors = value;
            }
        }

        public global::SharpSDL.Color Colors
        {
            get
            {
                global::SharpSDL.Color __result0;
                if (((global::SharpSDL.Palette.__Internal*) __Instance)->colors == IntPtr.Zero) __result0 = null;
                else if (global::SharpSDL.Color.NativeToManagedMap.ContainsKey(((global::SharpSDL.Palette.__Internal*) __Instance)->colors))
                    __result0 = (global::SharpSDL.Color) global::SharpSDL.Color.NativeToManagedMap[((global::SharpSDL.Palette.__Internal*) __Instance)->colors];
                else __result0 = global::SharpSDL.Color.__CreateInstance(((global::SharpSDL.Palette.__Internal*) __Instance)->colors);
                return __result0;
            }

            set
            {
                ((global::SharpSDL.Palette.__Internal*)__Instance)->colors = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint Version
        {
            get
            {
                return ((global::SharpSDL.Palette.__Internal*) __Instance)->version;
            }

            set
            {
                ((global::SharpSDL.Palette.__Internal*)__Instance)->version = value;
            }
        }

        public int Refcount
        {
            get
            {
                return ((global::SharpSDL.Palette.__Internal*) __Instance)->refcount;
            }

            set
            {
                ((global::SharpSDL.Palette.__Internal*)__Instance)->refcount = value;
            }
        }
    }

    /// <remarks>Everything in the pixel format structure is read-only.</remarks>
    public unsafe partial class PixelFormat : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint format;

            [FieldOffset(8)]
            internal global::System.IntPtr palette;

            [FieldOffset(16)]
            internal byte BitsPerPixel;

            [FieldOffset(17)]
            internal byte BytesPerPixel;

            [FieldOffset(18)]
            internal fixed byte padding[2];

            [FieldOffset(20)]
            internal uint Rmask;

            [FieldOffset(24)]
            internal uint Gmask;

            [FieldOffset(28)]
            internal uint Bmask;

            [FieldOffset(32)]
            internal uint Amask;

            [FieldOffset(36)]
            internal byte Rloss;

            [FieldOffset(37)]
            internal byte Gloss;

            [FieldOffset(38)]
            internal byte Bloss;

            [FieldOffset(39)]
            internal byte Aloss;

            [FieldOffset(40)]
            internal byte Rshift;

            [FieldOffset(41)]
            internal byte Gshift;

            [FieldOffset(42)]
            internal byte Bshift;

            [FieldOffset(43)]
            internal byte Ashift;

            [FieldOffset(44)]
            internal int refcount;

            [FieldOffset(48)]
            internal global::System.IntPtr next;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_PixelFormat@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.PixelFormat> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.PixelFormat>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.PixelFormat __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.PixelFormat(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.PixelFormat __CreateInstance(global::SharpSDL.PixelFormat.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.PixelFormat(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.PixelFormat.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.PixelFormat.__Internal));
            *(global::SharpSDL.PixelFormat.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PixelFormat(global::SharpSDL.PixelFormat.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PixelFormat(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public PixelFormat()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.PixelFormat.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public PixelFormat(global::SharpSDL.PixelFormat _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.PixelFormat.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.PixelFormat.__Internal*) __Instance) = *((global::SharpSDL.PixelFormat.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.PixelFormat __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Format
        {
            get
            {
                return ((global::SharpSDL.PixelFormat.__Internal*) __Instance)->format;
            }

            set
            {
                ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->format = value;
            }
        }

        public global::SharpSDL.Palette Palette
        {
            get
            {
                global::SharpSDL.Palette __result0;
                if (((global::SharpSDL.PixelFormat.__Internal*) __Instance)->palette == IntPtr.Zero) __result0 = null;
                else if (global::SharpSDL.Palette.NativeToManagedMap.ContainsKey(((global::SharpSDL.PixelFormat.__Internal*) __Instance)->palette))
                    __result0 = (global::SharpSDL.Palette) global::SharpSDL.Palette.NativeToManagedMap[((global::SharpSDL.PixelFormat.__Internal*) __Instance)->palette];
                else __result0 = global::SharpSDL.Palette.__CreateInstance(((global::SharpSDL.PixelFormat.__Internal*) __Instance)->palette);
                return __result0;
            }

            set
            {
                ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->palette = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public byte BitsPerPixel
        {
            get
            {
                return ((global::SharpSDL.PixelFormat.__Internal*) __Instance)->BitsPerPixel;
            }

            set
            {
                ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->BitsPerPixel = value;
            }
        }

        public byte BytesPerPixel
        {
            get
            {
                return ((global::SharpSDL.PixelFormat.__Internal*) __Instance)->BytesPerPixel;
            }

            set
            {
                ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->BytesPerPixel = value;
            }
        }

        public byte[] Padding
        {
            get
            {
                byte[] __value = null;
                if (((global::SharpSDL.PixelFormat.__Internal*) __Instance)->padding != null)
                {
                    __value = new byte[2];
                    for (int i = 0; i < 2; i++)
                        __value[i] = ((global::SharpSDL.PixelFormat.__Internal*) __Instance)->padding[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 2; i++)
                        ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->padding[i] = value[i];
                }
            }
        }

        public uint Rmask
        {
            get
            {
                return ((global::SharpSDL.PixelFormat.__Internal*) __Instance)->Rmask;
            }

            set
            {
                ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->Rmask = value;
            }
        }

        public uint Gmask
        {
            get
            {
                return ((global::SharpSDL.PixelFormat.__Internal*) __Instance)->Gmask;
            }

            set
            {
                ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->Gmask = value;
            }
        }

        public uint Bmask
        {
            get
            {
                return ((global::SharpSDL.PixelFormat.__Internal*) __Instance)->Bmask;
            }

            set
            {
                ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->Bmask = value;
            }
        }

        public uint Amask
        {
            get
            {
                return ((global::SharpSDL.PixelFormat.__Internal*) __Instance)->Amask;
            }

            set
            {
                ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->Amask = value;
            }
        }

        public byte Rloss
        {
            get
            {
                return ((global::SharpSDL.PixelFormat.__Internal*) __Instance)->Rloss;
            }

            set
            {
                ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->Rloss = value;
            }
        }

        public byte Gloss
        {
            get
            {
                return ((global::SharpSDL.PixelFormat.__Internal*) __Instance)->Gloss;
            }

            set
            {
                ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->Gloss = value;
            }
        }

        public byte Bloss
        {
            get
            {
                return ((global::SharpSDL.PixelFormat.__Internal*) __Instance)->Bloss;
            }

            set
            {
                ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->Bloss = value;
            }
        }

        public byte Aloss
        {
            get
            {
                return ((global::SharpSDL.PixelFormat.__Internal*) __Instance)->Aloss;
            }

            set
            {
                ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->Aloss = value;
            }
        }

        public byte Rshift
        {
            get
            {
                return ((global::SharpSDL.PixelFormat.__Internal*) __Instance)->Rshift;
            }

            set
            {
                ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->Rshift = value;
            }
        }

        public byte Gshift
        {
            get
            {
                return ((global::SharpSDL.PixelFormat.__Internal*) __Instance)->Gshift;
            }

            set
            {
                ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->Gshift = value;
            }
        }

        public byte Bshift
        {
            get
            {
                return ((global::SharpSDL.PixelFormat.__Internal*) __Instance)->Bshift;
            }

            set
            {
                ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->Bshift = value;
            }
        }

        public byte Ashift
        {
            get
            {
                return ((global::SharpSDL.PixelFormat.__Internal*) __Instance)->Ashift;
            }

            set
            {
                ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->Ashift = value;
            }
        }

        public int Refcount
        {
            get
            {
                return ((global::SharpSDL.PixelFormat.__Internal*) __Instance)->refcount;
            }

            set
            {
                ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->refcount = value;
            }
        }

        public global::SharpSDL.PixelFormat Next
        {
            get
            {
                global::SharpSDL.PixelFormat __result0;
                if (((global::SharpSDL.PixelFormat.__Internal*) __Instance)->next == IntPtr.Zero) __result0 = null;
                else if (global::SharpSDL.PixelFormat.NativeToManagedMap.ContainsKey(((global::SharpSDL.PixelFormat.__Internal*) __Instance)->next))
                    __result0 = (global::SharpSDL.PixelFormat) global::SharpSDL.PixelFormat.NativeToManagedMap[((global::SharpSDL.PixelFormat.__Internal*) __Instance)->next];
                else __result0 = global::SharpSDL.PixelFormat.__CreateInstance(((global::SharpSDL.PixelFormat.__Internal*) __Instance)->next);
                return __result0;
            }

            set
            {
                ((global::SharpSDL.PixelFormat.__Internal*)__Instance)->next = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class SDL_pixels
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetPixelFormatName")]
            internal static extern global::System.IntPtr GetPixelFormatName(uint format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_MasksToPixelFormatEnum")]
            internal static extern uint MasksToPixelFormatEnum(int bpp, uint Rmask, uint Gmask, uint Bmask, uint Amask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_AllocFormat")]
            internal static extern global::System.IntPtr AllocFormat(uint pixel_format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_FreeFormat")]
            internal static extern void FreeFormat(global::System.IntPtr format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_AllocPalette")]
            internal static extern global::System.IntPtr AllocPalette(int ncolors);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_SetPixelFormatPalette")]
            internal static extern int SetPixelFormatPalette(global::System.IntPtr format, global::System.IntPtr palette);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_SetPaletteColors")]
            internal static extern int SetPaletteColors(global::System.IntPtr palette, global::System.IntPtr colors, int firstcolor, int ncolors);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_FreePalette")]
            internal static extern void FreePalette(global::System.IntPtr palette);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_MapRGB")]
            internal static extern uint MapRGB(global::System.IntPtr format, byte r, byte g, byte b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_MapRGBA")]
            internal static extern uint MapRGBA(global::System.IntPtr format, byte r, byte g, byte b, byte a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetRGB")]
            internal static extern void GetRGB(uint pixel, global::System.IntPtr format, byte* r, byte* g, byte* b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetRGBA")]
            internal static extern void GetRGBA(uint pixel, global::System.IntPtr format, byte* r, byte* g, byte* b, byte* a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_CalculateGammaRamp")]
            internal static extern void CalculateGammaRamp(float gamma, ushort* ramp);
        }

        /// <summary>Get the human readable name of a pixel format</summary>
        public static string GetPixelFormatName(uint format)
        {
            var __ret = __Internal.GetPixelFormatName(format);
            return Marshal.PtrToStringAnsi(__ret);
        }

        /// <summary>Convert a bpp and RGBA masks to an enumerated pixel format.</summary>
/// <returns>
/// <para>The pixel format, or ::SDL_PIXELFORMAT_UNKNOWN if the conversion</para>
/// <para>wasn't possible.</para>
/// </returns>
/// <remarks>SDL_PixelFormatEnumToMasks()</remarks>
        public static uint MasksToPixelFormatEnum(int bpp, uint Rmask, uint Gmask, uint Bmask, uint Amask)
        {
            var __ret = __Internal.MasksToPixelFormatEnum(bpp, Rmask, Gmask, Bmask, Amask);
            return __ret;
        }

        /// <summary>Create an SDL_PixelFormat structure from a pixel format enum.</summary>
        public static global::SharpSDL.PixelFormat AllocFormat(uint pixel_format)
        {
            var __ret = __Internal.AllocFormat(pixel_format);
            global::SharpSDL.PixelFormat __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::SharpSDL.PixelFormat.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::SharpSDL.PixelFormat) global::SharpSDL.PixelFormat.NativeToManagedMap[__ret];
            else __result0 = global::SharpSDL.PixelFormat.__CreateInstance(__ret);
            return __result0;
        }

        /// <summary>Free an SDL_PixelFormat structure.</summary>
        public static void FreeFormat(global::SharpSDL.PixelFormat format)
        {
            var __arg0 = ReferenceEquals(format, null) ? global::System.IntPtr.Zero : format.__Instance;
            __Internal.FreeFormat(__arg0);
        }

        /// <summary>
/// <para>Create a palette structure with the specified number of color</para>
/// <para>entries.</para>
/// </summary>
/// <returns>A new palette, or NULL if there wasn't enough memory.</returns>
/// <remarks>
/// <para>The palette entries are initialized to white.</para>
/// <para>SDL_FreePalette()</para>
/// </remarks>
        public static global::SharpSDL.Palette AllocPalette(int ncolors)
        {
            var __ret = __Internal.AllocPalette(ncolors);
            global::SharpSDL.Palette __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::SharpSDL.Palette.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::SharpSDL.Palette) global::SharpSDL.Palette.NativeToManagedMap[__ret];
            else __result0 = global::SharpSDL.Palette.__CreateInstance(__ret);
            return __result0;
        }

        /// <summary>Set the palette for a pixel format structure.</summary>
        public static int SetPixelFormatPalette(global::SharpSDL.PixelFormat format, global::SharpSDL.Palette palette)
        {
            var __arg0 = ReferenceEquals(format, null) ? global::System.IntPtr.Zero : format.__Instance;
            var __arg1 = ReferenceEquals(palette, null) ? global::System.IntPtr.Zero : palette.__Instance;
            var __ret = __Internal.SetPixelFormatPalette(__arg0, __arg1);
            return __ret;
        }

        /// <summary>Set a range of colors in a palette.</summary>
/// <param name="palette">The palette to modify.</param>
/// <param name="colors">An array of colors to copy into the palette.</param>
/// <param name="firstcolor">The index of the first palette entry to modify.</param>
/// <param name="ncolors">The number of entries to modify.</param>
/// <returns>0 on success, or -1 if not all of the colors could be set.</returns>
        public static int SetPaletteColors(global::SharpSDL.Palette palette, global::SharpSDL.Color colors, int firstcolor, int ncolors)
        {
            var __arg0 = ReferenceEquals(palette, null) ? global::System.IntPtr.Zero : palette.__Instance;
            var __arg1 = ReferenceEquals(colors, null) ? global::System.IntPtr.Zero : colors.__Instance;
            var __ret = __Internal.SetPaletteColors(__arg0, __arg1, firstcolor, ncolors);
            return __ret;
        }

        /// <summary>Free a palette created with SDL_AllocPalette().</summary>
/// <remarks>SDL_AllocPalette()</remarks>
        public static void FreePalette(global::SharpSDL.Palette palette)
        {
            var __arg0 = ReferenceEquals(palette, null) ? global::System.IntPtr.Zero : palette.__Instance;
            __Internal.FreePalette(__arg0);
        }

        /// <summary>Maps an RGB triple to an opaque pixel value for a given pixel format.</summary>
/// <remarks>SDL_MapRGBA</remarks>
        public static uint MapRGB(global::SharpSDL.PixelFormat format, byte r, byte g, byte b)
        {
            var __arg0 = ReferenceEquals(format, null) ? global::System.IntPtr.Zero : format.__Instance;
            var __ret = __Internal.MapRGB(__arg0, r, g, b);
            return __ret;
        }

        /// <summary>Maps an RGBA quadruple to a pixel value for a given pixel format.</summary>
/// <remarks>SDL_MapRGB</remarks>
        public static uint MapRGBA(global::SharpSDL.PixelFormat format, byte r, byte g, byte b, byte a)
        {
            var __arg0 = ReferenceEquals(format, null) ? global::System.IntPtr.Zero : format.__Instance;
            var __ret = __Internal.MapRGBA(__arg0, r, g, b, a);
            return __ret;
        }

        /// <summary>Get the RGB components from a pixel of the specified format.</summary>
/// <remarks>SDL_GetRGBA</remarks>
        public static void GetRGB(uint pixel, global::SharpSDL.PixelFormat format, byte* r, byte* g, byte* b)
        {
            var __arg1 = ReferenceEquals(format, null) ? global::System.IntPtr.Zero : format.__Instance;
            __Internal.GetRGB(pixel, __arg1, r, g, b);
        }

        /// <summary>Get the RGBA components from a pixel of the specified format.</summary>
/// <remarks>SDL_GetRGB</remarks>
        public static void GetRGBA(uint pixel, global::SharpSDL.PixelFormat format, byte* r, byte* g, byte* b, byte* a)
        {
            var __arg1 = ReferenceEquals(format, null) ? global::System.IntPtr.Zero : format.__Instance;
            __Internal.GetRGBA(pixel, __arg1, r, g, b, a);
        }

        /// <summary>Calculate a 256 entry gamma ramp for a gamma value.</summary>
        public static void CalculateGammaRamp(float gamma, ref ushort ramp)
        {
            fixed (ushort* __ramp1 = &ramp)
            {
                var __arg1 = __ramp1;
                __Internal.CalculateGammaRamp(gamma, __arg1);
            }
        }
    }
}
