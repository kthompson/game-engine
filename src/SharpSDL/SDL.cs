// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SharpSDL
{
    [Flags]
    public enum InitFlags
    {
        SDL_INIT_TIMER = 0,
        SDL_INIT_AUDIO = 0,
        SDL_INIT_VIDEO = 0,
        SDL_INIT_JOYSTICK = 0,
        SDL_INIT_HAPTIC = 0,
        SDL_INIT_GAMECONTROLLER = 0,
        SDL_INIT_EVENTS = 0,
        SDL_INIT_SENSOR = 0,
        SDL_INIT_NOPARACHUTE = 0,
        SDL_INIT_EVERYTHING = 0
    }

    public unsafe partial class SDL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_Init")]
            internal static extern int Init(uint flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_InitSubSystem")]
            internal static extern int InitSubSystem(uint flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_QuitSubSystem")]
            internal static extern void QuitSubSystem(uint flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_WasInit")]
            internal static extern uint WasInit(uint flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_Quit")]
            internal static extern void Quit();
        }

        /// <summary>This function initializes  the subsystems specified by</summary>
        public static int Init(uint flags)
        {
            var __ret = __Internal.Init(flags);
            return __ret;
        }

        /// <summary>This function initializes specific SDL subsystems</summary>
/// <remarks>
/// <para>Subsystem initialization is ref-counted, you must call</para>
/// <para>SDL_QuitSubSystem() for each SDL_InitSubSystem() to correctly</para>
/// <para>shutdown a subsystem manually (or call SDL_Quit() to force shutdown).</para>
/// <para>If a subsystem is already loaded then this call will</para>
/// <para>increase the ref-count and return.</para>
/// </remarks>
        public static int InitSubSystem(uint flags)
        {
            var __ret = __Internal.InitSubSystem(flags);
            return __ret;
        }

        /// <summary>This function cleans up specific SDL subsystems</summary>
        public static void QuitSubSystem(uint flags)
        {
            __Internal.QuitSubSystem(flags);
        }

        /// <summary>
/// <para>This function returns a mask of the specified subsystems which have</para>
/// <para>previously been initialized.</para>
/// </summary>
/// <remarks>Ifis 0, it returns a mask of all initialized subsystems.</remarks>
        public static uint WasInit(uint flags)
        {
            var __ret = __Internal.WasInit(flags);
            return __ret;
        }

        /// <summary>
/// <para>This function cleans up all initialized subsystems. You should</para>
/// <para>call it upon all exit conditions.</para>
/// </summary>
        public static void Quit()
        {
            __Internal.Quit();
        }
    }
}
