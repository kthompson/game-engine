// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SharpSDL
{
    /// <summary>The SDL keysym structure, used in key events.</summary>
/// <remarks>If you are looking for translated character input, see the ::SDL_TEXTINPUT event.</remarks>
    public unsafe partial class Keysym : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::SharpSDL.ScanCode scancode;

            [FieldOffset(4)]
            internal int sym;

            [FieldOffset(8)]
            internal ushort mod;

            [FieldOffset(12)]
            internal uint unused;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_Keysym@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.Keysym> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.Keysym>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.Keysym __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.Keysym(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.Keysym __CreateInstance(global::SharpSDL.Keysym.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.Keysym(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.Keysym.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.Keysym.__Internal));
            *(global::SharpSDL.Keysym.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Keysym(global::SharpSDL.Keysym.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Keysym(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Keysym()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.Keysym.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public Keysym(global::SharpSDL.Keysym _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.Keysym.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.Keysym.__Internal*) __Instance) = *((global::SharpSDL.Keysym.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.Keysym __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SharpSDL.ScanCode Scancode
        {
            get
            {
                return ((global::SharpSDL.Keysym.__Internal*) __Instance)->scancode;
            }

            set
            {
                ((global::SharpSDL.Keysym.__Internal*)__Instance)->scancode = value;
            }
        }

        public int Sym
        {
            get
            {
                return ((global::SharpSDL.Keysym.__Internal*) __Instance)->sym;
            }

            set
            {
                ((global::SharpSDL.Keysym.__Internal*)__Instance)->sym = value;
            }
        }

        public ushort Mod
        {
            get
            {
                return ((global::SharpSDL.Keysym.__Internal*) __Instance)->mod;
            }

            set
            {
                ((global::SharpSDL.Keysym.__Internal*)__Instance)->mod = value;
            }
        }

        public uint Unused
        {
            get
            {
                return ((global::SharpSDL.Keysym.__Internal*) __Instance)->unused;
            }

            set
            {
                ((global::SharpSDL.Keysym.__Internal*)__Instance)->unused = value;
            }
        }
    }

    public unsafe partial class SDLKeyboard
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetKeyboardFocus")]
            internal static extern global::System.IntPtr GetKeyboardFocus();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetKeyboardState")]
            internal static extern byte* GetKeyboardState(int* numkeys);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetModState")]
            internal static extern global::SharpSDL.KeyModifier GetModState();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_SetModState")]
            internal static extern void SetModState(global::SharpSDL.KeyModifier modstate);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetKeyFromScancode")]
            internal static extern int GetKeyFromScancode(global::SharpSDL.ScanCode scancode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetScancodeFromKey")]
            internal static extern global::SharpSDL.ScanCode GetScancodeFromKey(int key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetScancodeName")]
            internal static extern global::System.IntPtr GetScancodeName(global::SharpSDL.ScanCode scancode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetScancodeFromName")]
            internal static extern global::SharpSDL.ScanCode GetScancodeFromName([MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetKeyName")]
            internal static extern global::System.IntPtr GetKeyName(int key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetKeyFromName")]
            internal static extern int GetKeyFromName([MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_StartTextInput")]
            internal static extern void StartTextInput();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_StopTextInput")]
            internal static extern void StopTextInput();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_SetTextInputRect")]
            internal static extern void SetTextInputRect(global::System.IntPtr rect);
        }

        /// <summary>Get the window which currently has keyboard focus.</summary>
        public static global::SharpSDL.Window GetKeyboardFocus()
        {
            var __ret = __Internal.GetKeyboardFocus();
            global::SharpSDL.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::SharpSDL.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::SharpSDL.Window) global::SharpSDL.Window.NativeToManagedMap[__ret];
            else __result0 = global::SharpSDL.Window.__CreateInstance(__ret);
            return __result0;
        }

        /// <summary>Get a snapshot of the current state of the keyboard.</summary>
/// <param name="numkeys">if non-NULL, receives the length of the returned array.</param>
/// <returns>
/// <para>An array of key states. Indexes into this array are obtained by using ::SDL_Scancode values.</para>
/// <para> <c>Example:</c> </para>
/// </returns>
        public static byte* GetKeyboardState(ref int numkeys)
        {
            fixed (int* __numkeys0 = &numkeys)
            {
                var __arg0 = __numkeys0;
                var __ret = __Internal.GetKeyboardState(__arg0);
                return __ret;
            }
        }

        /// <summary>Get the current key modifier state for the keyboard.</summary>
        public static global::SharpSDL.KeyModifier GetModState()
        {
            var __ret = __Internal.GetModState();
            return __ret;
        }

        /// <summary>Set the current key modifier state for the keyboard.</summary>
/// <remarks>This does not change the keyboard state, only the key modifier flags.</remarks>
        public static void SetModState(global::SharpSDL.KeyModifier modstate)
        {
            __Internal.SetModState(modstate);
        }

        /// <summary>
/// <para>Get the key code corresponding to the given scancode according</para>
/// <para>to the current keyboard layout.</para>
/// </summary>
/// <remarks>
/// <para>See ::SDL_Keycode for details.</para>
/// <para>SDL_GetKeyName()</para>
/// </remarks>
        public static int GetKeyFromScancode(global::SharpSDL.ScanCode scancode)
        {
            var __ret = __Internal.GetKeyFromScancode(scancode);
            return __ret;
        }

        /// <summary>
/// <para>Get the scancode corresponding to the given key code according to the</para>
/// <para>current keyboard layout.</para>
/// </summary>
/// <remarks>
/// <para>See ::SDL_Scancode for details.</para>
/// <para>SDL_GetScancodeName()</para>
/// </remarks>
        public static global::SharpSDL.ScanCode GetScancodeFromKey(int key)
        {
            var __ret = __Internal.GetScancodeFromKey(key);
            return __ret;
        }

        /// <summary>Get a human-readable name for a scancode.</summary>
/// <returns>
/// <para>A pointer to the name for the scancode.</para>
/// <para>If the scancode doesn't have a name, this function returns</para>
/// <para>an empty string (&quot;&quot;).</para>
/// </returns>
/// <remarks>SDL_Scancode</remarks>
        public static string GetScancodeName(global::SharpSDL.ScanCode scancode)
        {
            var __ret = __Internal.GetScancodeName(scancode);
            return Marshal.PtrToStringAnsi(__ret);
        }

        /// <summary>Get a scancode from a human-readable name</summary>
/// <returns>scancode, or SDL_SCANCODE_UNKNOWN if the name wasn't recognized</returns>
/// <remarks>SDL_Scancode</remarks>
        public static global::SharpSDL.ScanCode GetScancodeFromName(string name)
        {
            var __ret = __Internal.GetScancodeFromName(name);
            return __ret;
        }

        /// <summary>Get a human-readable name for a key.</summary>
/// <returns>
/// <para>A pointer to a UTF-8 string that stays valid at least until the next</para>
/// <para>call to this function. If you need it around any longer, you must</para>
/// <para>copy it.  If the key doesn't have a name, this function returns an</para>
/// <para>empty string (&quot;&quot;).</para>
/// </returns>
/// <remarks>SDL_Keycode</remarks>
        public static string GetKeyName(int key)
        {
            var __ret = __Internal.GetKeyName(key);
            return Marshal.PtrToStringAnsi(__ret);
        }

        /// <summary>Get a key code from a human-readable name</summary>
/// <returns>key code, or SDLK_UNKNOWN if the name wasn't recognized</returns>
/// <remarks>SDL_Keycode</remarks>
        public static int GetKeyFromName(string name)
        {
            var __ret = __Internal.GetKeyFromName(name);
            return __ret;
        }

        /// <summary>
/// <para>Start accepting Unicode text input events.</para>
/// <para>This function will show the on-screen keyboard if supported.</para>
/// </summary>
/// <remarks>
/// <para>SDL_StopTextInput()</para>
/// <para>SDL_SetTextInputRect()</para>
/// <para>SDL_HasScreenKeyboardSupport()</para>
/// </remarks>
        public static void StartTextInput()
        {
            __Internal.StartTextInput();
        }

        /// <summary>
/// <para>Stop receiving any text input events.</para>
/// <para>This function will hide the on-screen keyboard if supported.</para>
/// </summary>
/// <remarks>
/// <para>SDL_StartTextInput()</para>
/// <para>SDL_HasScreenKeyboardSupport()</para>
/// </remarks>
        public static void StopTextInput()
        {
            __Internal.StopTextInput();
        }

        /// <summary>
/// <para>Set the rectangle used to type Unicode text inputs.</para>
/// <para>This is used as a hint for IME and on-screen keyboard placement.</para>
/// </summary>
/// <remarks>SDL_StartTextInput()</remarks>
        public static void SetTextInputRect(global::SharpSDL.Rect rect)
        {
            var __arg0 = ReferenceEquals(rect, null) ? global::System.IntPtr.Zero : rect.__Instance;
            __Internal.SetTextInputRect(__arg0);
        }
    }
}
