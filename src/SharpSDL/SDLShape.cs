// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SharpSDL
{
    /// <summary>An enum denoting the specific type of contents present in an SDL_WindowShapeParams union.</summary>
    public enum WindowShapeMode
    {
        /// <summary>The default mode, a binarized alpha cutoff of 1.</summary>
        ShapeModeDefault = 0,
        /// <summary>A binarized alpha cutoff with a given integer value.</summary>
        ShapeModeBinarizeAlpha = 1,
        /// <summary>A binarized alpha cutoff with a given integer value, but with the opposite comparison.</summary>
        ShapeModeReverseBinarizeAlpha = 2,
        /// <summary>A color key is applied.</summary>
        ShapeModeColorKey = 3
    }

    /// <summary>A union containing parameters for shaped windows.</summary>
    public unsafe partial struct WindowShapeParams
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal byte binarizationCutoff;

            [FieldOffset(0)]
            internal global::SharpSDL.Color.__Internal colorKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_WindowShapeParams@@QEAA@AEBT0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        private WindowShapeParams.__Internal __instance;
        internal WindowShapeParams.__Internal __Instance { get { return __instance; } }

        internal static global::SharpSDL.WindowShapeParams __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.WindowShapeParams(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.WindowShapeParams __CreateInstance(global::SharpSDL.WindowShapeParams.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.WindowShapeParams(native, skipVTables);
        }

        private WindowShapeParams(global::SharpSDL.WindowShapeParams.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private WindowShapeParams(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::SharpSDL.WindowShapeParams.__Internal*) native;
        }

        public WindowShapeParams(global::SharpSDL.WindowShapeParams _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public byte BinarizationCutoff
        {
            get
            {
                return __instance.binarizationCutoff;
            }

            set
            {
                __instance.binarizationCutoff = value;
            }
        }

        public global::SharpSDL.Color ColorKey
        {
            get
            {
                return global::SharpSDL.Color.__CreateInstance(__instance.colorKey);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.colorKey = *(global::SharpSDL.Color.__Internal*) value.__Instance;
            }
        }
    }

    /// <summary>A struct that tags the SDL_WindowShapeParams union with an enum describing the type of its contents.</summary>
    public unsafe partial class SDL_WindowShapeMode : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::SharpSDL.WindowShapeMode mode;

            [FieldOffset(4)]
            internal global::SharpSDL.WindowShapeParams.__Internal parameters;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0SDL_WindowShapeMode@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.SDL_WindowShapeMode> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SharpSDL.SDL_WindowShapeMode>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::SharpSDL.SDL_WindowShapeMode __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::SharpSDL.SDL_WindowShapeMode(native.ToPointer(), skipVTables);
        }

        internal static global::SharpSDL.SDL_WindowShapeMode __CreateInstance(global::SharpSDL.SDL_WindowShapeMode.__Internal native, bool skipVTables = false)
        {
            return new global::SharpSDL.SDL_WindowShapeMode(native, skipVTables);
        }

        private static void* __CopyValue(global::SharpSDL.SDL_WindowShapeMode.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::SharpSDL.SDL_WindowShapeMode.__Internal));
            *(global::SharpSDL.SDL_WindowShapeMode.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SDL_WindowShapeMode(global::SharpSDL.SDL_WindowShapeMode.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SDL_WindowShapeMode(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public SDL_WindowShapeMode()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.SDL_WindowShapeMode.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public SDL_WindowShapeMode(global::SharpSDL.SDL_WindowShapeMode _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SharpSDL.SDL_WindowShapeMode.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::SharpSDL.SDL_WindowShapeMode.__Internal*) __Instance) = *((global::SharpSDL.SDL_WindowShapeMode.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::SharpSDL.SDL_WindowShapeMode __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SharpSDL.WindowShapeMode Mode
        {
            get
            {
                return ((global::SharpSDL.SDL_WindowShapeMode.__Internal*) __Instance)->mode;
            }

            set
            {
                ((global::SharpSDL.SDL_WindowShapeMode.__Internal*)__Instance)->mode = value;
            }
        }

        public global::SharpSDL.WindowShapeParams Parameters
        {
            get
            {
                return global::SharpSDL.WindowShapeParams.__CreateInstance(((global::SharpSDL.SDL_WindowShapeMode.__Internal*) __Instance)->parameters);
            }

            set
            {
                ((global::SharpSDL.SDL_WindowShapeMode.__Internal*)__Instance)->parameters = value.__Instance;
            }
        }
    }

    public unsafe partial class SDLShape
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_CreateShapedWindow")]
            internal static extern global::System.IntPtr CreateShapedWindow([MarshalAs(UnmanagedType.LPStr)] string title, uint x, uint y, uint w, uint h, uint flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_SetWindowShape")]
            internal static extern int SetWindowShape(global::System.IntPtr window, global::System.IntPtr shape, global::System.IntPtr shape_mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("SDL2", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="SDL_GetShapedWindowMode")]
            internal static extern int GetShapedWindowMode(global::System.IntPtr window, global::System.IntPtr shape_mode);
        }

        /// <summary>Create a window that can be shaped with the specified position, dimensions, and flags.</summary>
/// <param name="title">The title of the window, in UTF-8 encoding.</param>
/// <param name="x">
/// <para>The x position of the window, ::SDL_WINDOWPOS_CENTERED, or</para>
/// <para>::SDL_WINDOWPOS_UNDEFINED.</para>
/// </param>
/// <param name="y">
/// <para>The y position of the window, ::SDL_WINDOWPOS_CENTERED, or</para>
/// <para>::SDL_WINDOWPOS_UNDEFINED.</para>
/// </param>
/// <param name="w">The width of the window.</param>
/// <param name="h">The height of the window.</param>
/// <param name="flags">
/// <para>The flags for the window, a mask of SDL_WINDOW_BORDERLESS with any of the following:</para>
/// <para>::SDL_WINDOW_OPENGL,     ::SDL_WINDOW_INPUT_GRABBED,</para>
/// <para>::SDL_WINDOW_HIDDEN,     ::SDL_WINDOW_RESIZABLE,</para>
/// <para>::SDL_WINDOW_MAXIMIZED,  ::SDL_WINDOW_MINIMIZED,</para>
/// <para>::SDL_WINDOW_BORDERLESS is always set, and ::SDL_WINDOW_FULLSCREEN is always unset.</para>
/// </param>
/// <returns>The window created, or NULL if window creation failed.</returns>
/// <remarks>SDL_DestroyWindow()</remarks>
        public static global::SharpSDL.Window CreateShapedWindow(string title, uint x, uint y, uint w, uint h, uint flags)
        {
            var __ret = __Internal.CreateShapedWindow(title, x, y, w, h, flags);
            global::SharpSDL.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::SharpSDL.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::SharpSDL.Window) global::SharpSDL.Window.NativeToManagedMap[__ret];
            else __result0 = global::SharpSDL.Window.__CreateInstance(__ret);
            return __result0;
        }

        /// <summary>Set the shape and parameters of a shaped window.</summary>
/// <param name="window">The shaped window whose parameters should be set.</param>
/// <param name="shape">A surface encoding the desired shape for the window.</param>
/// <param name="shape_mode">The parameters to set for the shaped window.</param>
/// <returns>
/// <para>0 on success, SDL_INVALID_SHAPE_ARGUMENT on an invalid shape argument, or SDL_NONSHAPEABLE_WINDOW</para>
/// <para>if the SDL_Window given does not reference a valid shaped window.</para>
/// </returns>
/// <remarks>
/// <para>SDL_WindowShapeMode</para>
/// <para>SDL_GetShapedWindowMode.</para>
/// </remarks>
        public static int SetWindowShape(global::SharpSDL.Window window, global::SharpSDL.Surface shape, global::SharpSDL.SDL_WindowShapeMode shape_mode)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __arg1 = ReferenceEquals(shape, null) ? global::System.IntPtr.Zero : shape.__Instance;
            var __arg2 = ReferenceEquals(shape_mode, null) ? global::System.IntPtr.Zero : shape_mode.__Instance;
            var __ret = __Internal.SetWindowShape(__arg0, __arg1, __arg2);
            return __ret;
        }

        /// <summary>Get the shape parameters of a shaped window.</summary>
/// <param name="window">The shaped window whose parameters should be retrieved.</param>
/// <param name="shape_mode">An empty shape-mode structure to fill, or NULL to check whether the window has a shape.</param>
/// <returns>
/// <para>0 if the window has a shape and, provided shape_mode was not NULL, shape_mode has been filled with the mode</para>
/// <para>data, SDL_NONSHAPEABLE_WINDOW if the SDL_Window given is not a shaped window, or SDL_WINDOW_LACKS_SHAPE if</para>
/// <para>the SDL_Window given is a shapeable window currently lacking a shape.</para>
/// </returns>
/// <remarks>
/// <para>SDL_WindowShapeMode</para>
/// <para>SDL_SetWindowShape</para>
/// </remarks>
        public static int GetShapedWindowMode(global::SharpSDL.Window window, global::SharpSDL.SDL_WindowShapeMode shape_mode)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __arg1 = ReferenceEquals(shape_mode, null) ? global::System.IntPtr.Zero : shape_mode.__Instance;
            var __ret = __Internal.GetShapedWindowMode(__arg0, __arg1);
            return __ret;
        }
    }
}
